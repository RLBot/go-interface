// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A ScriptConfiguration defines a script of a match.
type ScriptConfigurationT struct {
	Name string `json:"name"`
	RootDir string `json:"root_dir"`
	RunCommand string `json:"run_command"`
	ScriptId int32 `json:"script_id"`
	AgentId string `json:"agent_id"`
}

func (t *ScriptConfigurationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	rootDirOffset := flatbuffers.UOffsetT(0)
	if t.RootDir != "" {
		rootDirOffset = builder.CreateString(t.RootDir)
	}
	runCommandOffset := flatbuffers.UOffsetT(0)
	if t.RunCommand != "" {
		runCommandOffset = builder.CreateString(t.RunCommand)
	}
	agentIdOffset := flatbuffers.UOffsetT(0)
	if t.AgentId != "" {
		agentIdOffset = builder.CreateString(t.AgentId)
	}
	ScriptConfigurationStart(builder)
	ScriptConfigurationAddName(builder, nameOffset)
	ScriptConfigurationAddRootDir(builder, rootDirOffset)
	ScriptConfigurationAddRunCommand(builder, runCommandOffset)
	ScriptConfigurationAddScriptId(builder, t.ScriptId)
	ScriptConfigurationAddAgentId(builder, agentIdOffset)
	return ScriptConfigurationEnd(builder)
}

func (rcv *ScriptConfiguration) UnPackTo(t *ScriptConfigurationT) {
	t.Name = string(rcv.Name())
	t.RootDir = string(rcv.RootDir())
	t.RunCommand = string(rcv.RunCommand())
	t.ScriptId = rcv.ScriptId()
	t.AgentId = string(rcv.AgentId())
}

func (rcv *ScriptConfiguration) UnPack() *ScriptConfigurationT {
	if rcv == nil {
		return nil
	}
	t := &ScriptConfigurationT{}
	rcv.UnPackTo(t)
	return t
}

type ScriptConfiguration struct {
	_tab flatbuffers.Table
}

func GetRootAsScriptConfiguration(buf []byte, offset flatbuffers.UOffsetT) *ScriptConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ScriptConfiguration{}
	x.Init(buf, n+offset)
	return x
}

func FinishScriptConfigurationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsScriptConfiguration(buf []byte, offset flatbuffers.UOffsetT) *ScriptConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ScriptConfiguration{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedScriptConfigurationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ScriptConfiguration) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ScriptConfiguration) Table() flatbuffers.Table {
	return rcv._tab
}

/// The name of the script.
func (rcv *ScriptConfiguration) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the script.
/// The root directory of the script and the working directory for the run command.
func (rcv *ScriptConfiguration) RootDir() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The root directory of the script and the working directory for the run command.
/// A console command that will start up the script.
func (rcv *ScriptConfiguration) RunCommand() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A console command that will start up the script.
/// The id of the script.
/// This value is mostly used internally to keep track of participants in the match.
func (rcv *ScriptConfiguration) ScriptId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The id of the script.
/// This value is mostly used internally to keep track of participants in the match.
func (rcv *ScriptConfiguration) MutateScriptId(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// A unique user-defined string that is used to connect clients to the right players/scripts.
/// If a bot/script has a run command, RLBot will pass this agent id to the process using an environment variable, RLBOT_AGENT_ID.
/// Upon connecting the process announces that it is responsible for this agent id and RLBot will pair the two.
/// The recommended format for agent ids is "developername/botname".
func (rcv *ScriptConfiguration) AgentId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A unique user-defined string that is used to connect clients to the right players/scripts.
/// If a bot/script has a run command, RLBot will pass this agent id to the process using an environment variable, RLBOT_AGENT_ID.
/// Upon connecting the process announces that it is responsible for this agent id and RLBot will pair the two.
/// The recommended format for agent ids is "developername/botname".
func ScriptConfigurationStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ScriptConfigurationAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func ScriptConfigurationAddRootDir(builder *flatbuffers.Builder, rootDir flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rootDir), 0)
}
func ScriptConfigurationAddRunCommand(builder *flatbuffers.Builder, runCommand flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(runCommand), 0)
}
func ScriptConfigurationAddScriptId(builder *flatbuffers.Builder, scriptId int32) {
	builder.PrependInt32Slot(3, scriptId, 0)
}
func ScriptConfigurationAddAgentId(builder *flatbuffers.Builder, agentId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(agentId), 0)
}
func ScriptConfigurationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
