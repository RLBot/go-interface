// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A normal human player.
type HumanT struct {
}

func (t *HumanT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	HumanStart(builder)
	return HumanEnd(builder)
}

func (rcv *Human) UnPackTo(t *HumanT) {
}

func (rcv *Human) UnPack() *HumanT {
	if rcv == nil {
		return nil
	}
	t := &HumanT{}
	rcv.UnPackTo(t)
	return t
}

type Human struct {
	_tab flatbuffers.Table
}

func GetRootAsHuman(buf []byte, offset flatbuffers.UOffsetT) *Human {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Human{}
	x.Init(buf, n+offset)
	return x
}

func FinishHumanBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsHuman(buf []byte, offset flatbuffers.UOffsetT) *Human {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Human{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedHumanBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Human) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Human) Table() flatbuffers.Table {
	return rcv._tab
}

func HumanStart(builder *flatbuffers.Builder) {
	builder.StartObject(0)
}
func HumanEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
