// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FieldInfoT struct {
	BoostPads []*BoostPadT `json:"boost_pads"`
	Goals []*GoalInfoT `json:"goals"`
}

func (t *FieldInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	boostPadsOffset := flatbuffers.UOffsetT(0)
	if t.BoostPads != nil {
		boostPadsLength := len(t.BoostPads)
		boostPadsOffsets := make([]flatbuffers.UOffsetT, boostPadsLength)
		for j := 0; j < boostPadsLength; j++ {
			boostPadsOffsets[j] = t.BoostPads[j].Pack(builder)
		}
		FieldInfoStartBoostPadsVector(builder, boostPadsLength)
		for j := boostPadsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(boostPadsOffsets[j])
		}
		boostPadsOffset = builder.EndVector(boostPadsLength)
	}
	goalsOffset := flatbuffers.UOffsetT(0)
	if t.Goals != nil {
		goalsLength := len(t.Goals)
		goalsOffsets := make([]flatbuffers.UOffsetT, goalsLength)
		for j := 0; j < goalsLength; j++ {
			goalsOffsets[j] = t.Goals[j].Pack(builder)
		}
		FieldInfoStartGoalsVector(builder, goalsLength)
		for j := goalsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(goalsOffsets[j])
		}
		goalsOffset = builder.EndVector(goalsLength)
	}
	FieldInfoStart(builder)
	FieldInfoAddBoostPads(builder, boostPadsOffset)
	FieldInfoAddGoals(builder, goalsOffset)
	return FieldInfoEnd(builder)
}

func (rcv *FieldInfo) UnPackTo(t *FieldInfoT) {
	boostPadsLength := rcv.BoostPadsLength()
	t.BoostPads = make([]*BoostPadT, boostPadsLength)
	for j := 0; j < boostPadsLength; j++ {
		x := BoostPad{}
		rcv.BoostPads(&x, j)
		t.BoostPads[j] = x.UnPack()
	}
	goalsLength := rcv.GoalsLength()
	t.Goals = make([]*GoalInfoT, goalsLength)
	for j := 0; j < goalsLength; j++ {
		x := GoalInfo{}
		rcv.Goals(&x, j)
		t.Goals[j] = x.UnPack()
	}
}

func (rcv *FieldInfo) UnPack() *FieldInfoT {
	if rcv == nil {
		return nil
	}
	t := &FieldInfoT{}
	rcv.UnPackTo(t)
	return t
}

type FieldInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsFieldInfo(buf []byte, offset flatbuffers.UOffsetT) *FieldInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FieldInfo{}
	x.Init(buf, n+offset)
	return x
}

func FinishFieldInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFieldInfo(buf []byte, offset flatbuffers.UOffsetT) *FieldInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FieldInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFieldInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FieldInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FieldInfo) Table() flatbuffers.Table {
	return rcv._tab
}

/// BoostInfo will be provided in the same order.
func (rcv *FieldInfo) BoostPads(obj *BoostPad, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *FieldInfo) BoostPadsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// BoostInfo will be provided in the same order.
func (rcv *FieldInfo) Goals(obj *GoalInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *FieldInfo) GoalsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func FieldInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func FieldInfoAddBoostPads(builder *flatbuffers.Builder, boostPads flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(boostPads), 0)
}
func FieldInfoStartBoostPadsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FieldInfoAddGoals(builder *flatbuffers.Builder, goals flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(goals), 0)
}
func FieldInfoStartGoalsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FieldInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
