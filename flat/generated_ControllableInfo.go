// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ControllableInfoT struct {
	Index uint32 `json:"index"`
	SpawnId int32 `json:"spawn_id"`
}

func (t *ControllableInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	ControllableInfoStart(builder)
	ControllableInfoAddIndex(builder, t.Index)
	ControllableInfoAddSpawnId(builder, t.SpawnId)
	return ControllableInfoEnd(builder)
}

func (rcv *ControllableInfo) UnPackTo(t *ControllableInfoT) {
	t.Index = rcv.Index()
	t.SpawnId = rcv.SpawnId()
}

func (rcv *ControllableInfo) UnPack() *ControllableInfoT {
	if rcv == nil {
		return nil
	}
	t := &ControllableInfoT{}
	rcv.UnPackTo(t)
	return t
}

type ControllableInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsControllableInfo(buf []byte, offset flatbuffers.UOffsetT) *ControllableInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ControllableInfo{}
	x.Init(buf, n+offset)
	return x
}

func FinishControllableInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsControllableInfo(buf []byte, offset flatbuffers.UOffsetT) *ControllableInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ControllableInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedControllableInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ControllableInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ControllableInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ControllableInfo) Index() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ControllableInfo) MutateIndex(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ControllableInfo) SpawnId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ControllableInfo) MutateSpawnId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func ControllableInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ControllableInfoAddIndex(builder *flatbuffers.Builder, index uint32) {
	builder.PrependUint32Slot(0, index, 0)
}
func ControllableInfoAddSpawnId(builder *flatbuffers.Builder, spawnId int32) {
	builder.PrependInt32Slot(1, spawnId, 0)
}
func ControllableInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
