// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DesiredGameStateT struct {
	BallStates []*DesiredBallStateT `json:"ball_states"`
	CarStates []*DesiredCarStateT `json:"car_states"`
	BoostStates []*DesiredBoostStateT `json:"boost_states"`
	GameInfoState *DesiredGameInfoStateT `json:"game_info_state"`
	ConsoleCommands []*ConsoleCommandT `json:"console_commands"`
}

func (t *DesiredGameStateT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	ballStatesOffset := flatbuffers.UOffsetT(0)
	if t.BallStates != nil {
		ballStatesLength := len(t.BallStates)
		ballStatesOffsets := make([]flatbuffers.UOffsetT, ballStatesLength)
		for j := 0; j < ballStatesLength; j++ {
			ballStatesOffsets[j] = t.BallStates[j].Pack(builder)
		}
		DesiredGameStateStartBallStatesVector(builder, ballStatesLength)
		for j := ballStatesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(ballStatesOffsets[j])
		}
		ballStatesOffset = builder.EndVector(ballStatesLength)
	}
	carStatesOffset := flatbuffers.UOffsetT(0)
	if t.CarStates != nil {
		carStatesLength := len(t.CarStates)
		carStatesOffsets := make([]flatbuffers.UOffsetT, carStatesLength)
		for j := 0; j < carStatesLength; j++ {
			carStatesOffsets[j] = t.CarStates[j].Pack(builder)
		}
		DesiredGameStateStartCarStatesVector(builder, carStatesLength)
		for j := carStatesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(carStatesOffsets[j])
		}
		carStatesOffset = builder.EndVector(carStatesLength)
	}
	boostStatesOffset := flatbuffers.UOffsetT(0)
	if t.BoostStates != nil {
		boostStatesLength := len(t.BoostStates)
		boostStatesOffsets := make([]flatbuffers.UOffsetT, boostStatesLength)
		for j := 0; j < boostStatesLength; j++ {
			boostStatesOffsets[j] = t.BoostStates[j].Pack(builder)
		}
		DesiredGameStateStartBoostStatesVector(builder, boostStatesLength)
		for j := boostStatesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(boostStatesOffsets[j])
		}
		boostStatesOffset = builder.EndVector(boostStatesLength)
	}
	gameInfoStateOffset := t.GameInfoState.Pack(builder)
	consoleCommandsOffset := flatbuffers.UOffsetT(0)
	if t.ConsoleCommands != nil {
		consoleCommandsLength := len(t.ConsoleCommands)
		consoleCommandsOffsets := make([]flatbuffers.UOffsetT, consoleCommandsLength)
		for j := 0; j < consoleCommandsLength; j++ {
			consoleCommandsOffsets[j] = t.ConsoleCommands[j].Pack(builder)
		}
		DesiredGameStateStartConsoleCommandsVector(builder, consoleCommandsLength)
		for j := consoleCommandsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(consoleCommandsOffsets[j])
		}
		consoleCommandsOffset = builder.EndVector(consoleCommandsLength)
	}
	DesiredGameStateStart(builder)
	DesiredGameStateAddBallStates(builder, ballStatesOffset)
	DesiredGameStateAddCarStates(builder, carStatesOffset)
	DesiredGameStateAddBoostStates(builder, boostStatesOffset)
	DesiredGameStateAddGameInfoState(builder, gameInfoStateOffset)
	DesiredGameStateAddConsoleCommands(builder, consoleCommandsOffset)
	return DesiredGameStateEnd(builder)
}

func (rcv *DesiredGameState) UnPackTo(t *DesiredGameStateT) {
	ballStatesLength := rcv.BallStatesLength()
	t.BallStates = make([]*DesiredBallStateT, ballStatesLength)
	for j := 0; j < ballStatesLength; j++ {
		x := DesiredBallState{}
		rcv.BallStates(&x, j)
		t.BallStates[j] = x.UnPack()
	}
	carStatesLength := rcv.CarStatesLength()
	t.CarStates = make([]*DesiredCarStateT, carStatesLength)
	for j := 0; j < carStatesLength; j++ {
		x := DesiredCarState{}
		rcv.CarStates(&x, j)
		t.CarStates[j] = x.UnPack()
	}
	boostStatesLength := rcv.BoostStatesLength()
	t.BoostStates = make([]*DesiredBoostStateT, boostStatesLength)
	for j := 0; j < boostStatesLength; j++ {
		x := DesiredBoostState{}
		rcv.BoostStates(&x, j)
		t.BoostStates[j] = x.UnPack()
	}
	t.GameInfoState = rcv.GameInfoState(nil).UnPack()
	consoleCommandsLength := rcv.ConsoleCommandsLength()
	t.ConsoleCommands = make([]*ConsoleCommandT, consoleCommandsLength)
	for j := 0; j < consoleCommandsLength; j++ {
		x := ConsoleCommand{}
		rcv.ConsoleCommands(&x, j)
		t.ConsoleCommands[j] = x.UnPack()
	}
}

func (rcv *DesiredGameState) UnPack() *DesiredGameStateT {
	if rcv == nil {
		return nil
	}
	t := &DesiredGameStateT{}
	rcv.UnPackTo(t)
	return t
}

type DesiredGameState struct {
	_tab flatbuffers.Table
}

func GetRootAsDesiredGameState(buf []byte, offset flatbuffers.UOffsetT) *DesiredGameState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DesiredGameState{}
	x.Init(buf, n+offset)
	return x
}

func FinishDesiredGameStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDesiredGameState(buf []byte, offset flatbuffers.UOffsetT) *DesiredGameState {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DesiredGameState{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDesiredGameStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DesiredGameState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DesiredGameState) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DesiredGameState) BallStates(obj *DesiredBallState, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DesiredGameState) BallStatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DesiredGameState) CarStates(obj *DesiredCarState, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DesiredGameState) CarStatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DesiredGameState) BoostStates(obj *DesiredBoostState, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DesiredGameState) BoostStatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DesiredGameState) GameInfoState(obj *DesiredGameInfoState) *DesiredGameInfoState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DesiredGameInfoState)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DesiredGameState) ConsoleCommands(obj *ConsoleCommand, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DesiredGameState) ConsoleCommandsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DesiredGameStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func DesiredGameStateAddBallStates(builder *flatbuffers.Builder, ballStates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ballStates), 0)
}
func DesiredGameStateStartBallStatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DesiredGameStateAddCarStates(builder *flatbuffers.Builder, carStates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(carStates), 0)
}
func DesiredGameStateStartCarStatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DesiredGameStateAddBoostStates(builder *flatbuffers.Builder, boostStates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(boostStates), 0)
}
func DesiredGameStateStartBoostStatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DesiredGameStateAddGameInfoState(builder *flatbuffers.Builder, gameInfoState flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(gameInfoState), 0)
}
func DesiredGameStateAddConsoleCommands(builder *flatbuffers.Builder, consoleCommands flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(consoleCommands), 0)
}
func DesiredGameStateStartConsoleCommandsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DesiredGameStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
