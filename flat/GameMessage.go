// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
	"strconv"
)

type GameMessage byte

const (
	GameMessageNONE              GameMessage = 0
	GameMessagePlayerStatEvent   GameMessage = 1
	GameMessagePlayerSpectate    GameMessage = 2
	GameMessagePlayerInputChange GameMessage = 3
)

var EnumNamesGameMessage = map[GameMessage]string{
	GameMessageNONE:              "NONE",
	GameMessagePlayerStatEvent:   "PlayerStatEvent",
	GameMessagePlayerSpectate:    "PlayerSpectate",
	GameMessagePlayerInputChange: "PlayerInputChange",
}

var EnumValuesGameMessage = map[string]GameMessage{
	"NONE":              GameMessageNONE,
	"PlayerStatEvent":   GameMessagePlayerStatEvent,
	"PlayerSpectate":    GameMessagePlayerSpectate,
	"PlayerInputChange": GameMessagePlayerInputChange,
}

func (v GameMessage) String() string {
	if s, ok := EnumNamesGameMessage[v]; ok {
		return s
	}
	return "GameMessage(" + strconv.FormatInt(int64(v), 10) + ")"
}

type GameMessageT struct {
	Type GameMessage
	Value interface{}
}

func (t *GameMessageT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case GameMessagePlayerStatEvent:
		return t.Value.(*PlayerStatEventT).Pack(builder)
	case GameMessagePlayerSpectate:
		return t.Value.(*PlayerSpectateT).Pack(builder)
	case GameMessagePlayerInputChange:
		return t.Value.(*PlayerInputChangeT).Pack(builder)
	}
	return 0
}

func (rcv GameMessage) UnPack(table flatbuffers.Table) *GameMessageT {
	switch rcv {
	case GameMessagePlayerStatEvent:
		var x PlayerStatEvent
		x.Init(table.Bytes, table.Pos)
		return &GameMessageT{Type: GameMessagePlayerStatEvent, Value: x.UnPack()}
	case GameMessagePlayerSpectate:
		var x PlayerSpectate
		x.Init(table.Bytes, table.Pos)
		return &GameMessageT{Type: GameMessagePlayerSpectate, Value: x.UnPack()}
	case GameMessagePlayerInputChange:
		var x PlayerInputChange
		x.Init(table.Bytes, table.Pos)
		return &GameMessageT{Type: GameMessagePlayerInputChange, Value: x.UnPack()}
	}
	return nil
}
