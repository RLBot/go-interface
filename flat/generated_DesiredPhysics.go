// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A physical state of an object, with nullable components.
/// Used for game state setting to define which part of a physics body should change.
/// If a component is null, then the component will keep its current value.
type DesiredPhysicsT struct {
	Location *Vector3PartialT `json:"location"`
	Rotation *RotatorPartialT `json:"rotation"`
	Velocity *Vector3PartialT `json:"velocity"`
	AngularVelocity *Vector3PartialT `json:"angular_velocity"`
}

func (t *DesiredPhysicsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	locationOffset := t.Location.Pack(builder)
	rotationOffset := t.Rotation.Pack(builder)
	velocityOffset := t.Velocity.Pack(builder)
	angularVelocityOffset := t.AngularVelocity.Pack(builder)
	DesiredPhysicsStart(builder)
	DesiredPhysicsAddLocation(builder, locationOffset)
	DesiredPhysicsAddRotation(builder, rotationOffset)
	DesiredPhysicsAddVelocity(builder, velocityOffset)
	DesiredPhysicsAddAngularVelocity(builder, angularVelocityOffset)
	return DesiredPhysicsEnd(builder)
}

func (rcv *DesiredPhysics) UnPackTo(t *DesiredPhysicsT) {
	t.Location = rcv.Location(nil).UnPack()
	t.Rotation = rcv.Rotation(nil).UnPack()
	t.Velocity = rcv.Velocity(nil).UnPack()
	t.AngularVelocity = rcv.AngularVelocity(nil).UnPack()
}

func (rcv *DesiredPhysics) UnPack() *DesiredPhysicsT {
	if rcv == nil {
		return nil
	}
	t := &DesiredPhysicsT{}
	rcv.UnPackTo(t)
	return t
}

type DesiredPhysics struct {
	_tab flatbuffers.Table
}

func GetRootAsDesiredPhysics(buf []byte, offset flatbuffers.UOffsetT) *DesiredPhysics {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DesiredPhysics{}
	x.Init(buf, n+offset)
	return x
}

func FinishDesiredPhysicsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDesiredPhysics(buf []byte, offset flatbuffers.UOffsetT) *DesiredPhysics {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DesiredPhysics{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDesiredPhysicsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DesiredPhysics) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DesiredPhysics) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DesiredPhysics) Location(obj *Vector3Partial) *Vector3Partial {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vector3Partial)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DesiredPhysics) Rotation(obj *RotatorPartial) *RotatorPartial {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RotatorPartial)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DesiredPhysics) Velocity(obj *Vector3Partial) *Vector3Partial {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vector3Partial)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DesiredPhysics) AngularVelocity(obj *Vector3Partial) *Vector3Partial {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vector3Partial)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DesiredPhysicsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DesiredPhysicsAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(location), 0)
}
func DesiredPhysicsAddRotation(builder *flatbuffers.Builder, rotation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rotation), 0)
}
func DesiredPhysicsAddVelocity(builder *flatbuffers.Builder, velocity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(velocity), 0)
}
func DesiredPhysicsAddAngularVelocity(builder *flatbuffers.Builder, angularVelocity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(angularVelocity), 0)
}
func DesiredPhysicsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
