// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A console command which will be executed inside Rocket League.
/// See https://wiki.rlbot.org/framework/console-commands/ for a list of known commands.
type ConsoleCommandT struct {
	Command string `json:"command"`
}

func (t *ConsoleCommandT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	commandOffset := flatbuffers.UOffsetT(0)
	if t.Command != "" {
		commandOffset = builder.CreateString(t.Command)
	}
	ConsoleCommandStart(builder)
	ConsoleCommandAddCommand(builder, commandOffset)
	return ConsoleCommandEnd(builder)
}

func (rcv *ConsoleCommand) UnPackTo(t *ConsoleCommandT) {
	t.Command = string(rcv.Command())
}

func (rcv *ConsoleCommand) UnPack() *ConsoleCommandT {
	if rcv == nil {
		return nil
	}
	t := &ConsoleCommandT{}
	rcv.UnPackTo(t)
	return t
}

type ConsoleCommand struct {
	_tab flatbuffers.Table
}

func GetRootAsConsoleCommand(buf []byte, offset flatbuffers.UOffsetT) *ConsoleCommand {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConsoleCommand{}
	x.Init(buf, n+offset)
	return x
}

func FinishConsoleCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConsoleCommand(buf []byte, offset flatbuffers.UOffsetT) *ConsoleCommand {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConsoleCommand{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConsoleCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConsoleCommand) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConsoleCommand) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConsoleCommand) Command() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ConsoleCommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ConsoleCommandAddCommand(builder *flatbuffers.Builder, command flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(command), 0)
}
func ConsoleCommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
