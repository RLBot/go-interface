// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A packet of data from the game.
/// Is is sent every tick to bots, scripts, etc.
/// Static data is found in the FieldInfo.
type GamePacketT struct {
	Players []*PlayerInfoT `json:"players"`
	BoostPads []*BoostPadStateT `json:"boost_pads"`
	Balls []*BallInfoT `json:"balls"`
	MatchInfo *MatchInfoT `json:"match_info"`
	Teams []*TeamInfoT `json:"teams"`
}

func (t *GamePacketT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	playersOffset := flatbuffers.UOffsetT(0)
	if t.Players != nil {
		playersLength := len(t.Players)
		playersOffsets := make([]flatbuffers.UOffsetT, playersLength)
		for j := 0; j < playersLength; j++ {
			playersOffsets[j] = t.Players[j].Pack(builder)
		}
		GamePacketStartPlayersVector(builder, playersLength)
		for j := playersLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(playersOffsets[j])
		}
		playersOffset = builder.EndVector(playersLength)
	}
	boostPadsOffset := flatbuffers.UOffsetT(0)
	if t.BoostPads != nil {
		boostPadsLength := len(t.BoostPads)
		GamePacketStartBoostPadsVector(builder, boostPadsLength)
		for j := boostPadsLength - 1; j >= 0; j-- {
			t.BoostPads[j].Pack(builder)
		}
		boostPadsOffset = builder.EndVector(boostPadsLength)
	}
	ballsOffset := flatbuffers.UOffsetT(0)
	if t.Balls != nil {
		ballsLength := len(t.Balls)
		ballsOffsets := make([]flatbuffers.UOffsetT, ballsLength)
		for j := 0; j < ballsLength; j++ {
			ballsOffsets[j] = t.Balls[j].Pack(builder)
		}
		GamePacketStartBallsVector(builder, ballsLength)
		for j := ballsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(ballsOffsets[j])
		}
		ballsOffset = builder.EndVector(ballsLength)
	}
	matchInfoOffset := t.MatchInfo.Pack(builder)
	teamsOffset := flatbuffers.UOffsetT(0)
	if t.Teams != nil {
		teamsLength := len(t.Teams)
		GamePacketStartTeamsVector(builder, teamsLength)
		for j := teamsLength - 1; j >= 0; j-- {
			t.Teams[j].Pack(builder)
		}
		teamsOffset = builder.EndVector(teamsLength)
	}
	GamePacketStart(builder)
	GamePacketAddPlayers(builder, playersOffset)
	GamePacketAddBoostPads(builder, boostPadsOffset)
	GamePacketAddBalls(builder, ballsOffset)
	GamePacketAddMatchInfo(builder, matchInfoOffset)
	GamePacketAddTeams(builder, teamsOffset)
	return GamePacketEnd(builder)
}

func (rcv *GamePacket) UnPackTo(t *GamePacketT) {
	playersLength := rcv.PlayersLength()
	t.Players = make([]*PlayerInfoT, playersLength)
	for j := 0; j < playersLength; j++ {
		x := PlayerInfo{}
		rcv.Players(&x, j)
		t.Players[j] = x.UnPack()
	}
	boostPadsLength := rcv.BoostPadsLength()
	t.BoostPads = make([]*BoostPadStateT, boostPadsLength)
	for j := 0; j < boostPadsLength; j++ {
		x := BoostPadState{}
		rcv.BoostPads(&x, j)
		t.BoostPads[j] = x.UnPack()
	}
	ballsLength := rcv.BallsLength()
	t.Balls = make([]*BallInfoT, ballsLength)
	for j := 0; j < ballsLength; j++ {
		x := BallInfo{}
		rcv.Balls(&x, j)
		t.Balls[j] = x.UnPack()
	}
	t.MatchInfo = rcv.MatchInfo(nil).UnPack()
	teamsLength := rcv.TeamsLength()
	t.Teams = make([]*TeamInfoT, teamsLength)
	for j := 0; j < teamsLength; j++ {
		x := TeamInfo{}
		rcv.Teams(&x, j)
		t.Teams[j] = x.UnPack()
	}
}

func (rcv *GamePacket) UnPack() *GamePacketT {
	if rcv == nil {
		return nil
	}
	t := &GamePacketT{}
	rcv.UnPackTo(t)
	return t
}

type GamePacket struct {
	_tab flatbuffers.Table
}

func GetRootAsGamePacket(buf []byte, offset flatbuffers.UOffsetT) *GamePacket {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GamePacket{}
	x.Init(buf, n+offset)
	return x
}

func FinishGamePacketBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGamePacket(buf []byte, offset flatbuffers.UOffsetT) *GamePacket {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GamePacket{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGamePacketBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GamePacket) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GamePacket) Table() flatbuffers.Table {
	return rcv._tab
}

/// The current state of all players and their cars.
func (rcv *GamePacket) Players(obj *PlayerInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GamePacket) PlayersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The current state of all players and their cars.
/// The current state of all boost pads.
/// The static information about boost pads are found in the FieldInfo.
/// The boost pads are ordered by y-coordinate and then x-coordinate.
func (rcv *GamePacket) BoostPads(obj *BoostPadState, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 8
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GamePacket) BoostPadsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The current state of all boost pads.
/// The static information about boost pads are found in the FieldInfo.
/// The boost pads are ordered by y-coordinate and then x-coordinate.
/// The current state of all balls.
func (rcv *GamePacket) Balls(obj *BallInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GamePacket) BallsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The current state of all balls.
/// The current state of the match such as timers and gravity.
func (rcv *GamePacket) MatchInfo(obj *MatchInfo) *MatchInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MatchInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// The current state of the match such as timers and gravity.
/// The current state of teams, i.e. the team scores.
func (rcv *GamePacket) Teams(obj *TeamInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 8
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GamePacket) TeamsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The current state of teams, i.e. the team scores.
func GamePacketStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func GamePacketAddPlayers(builder *flatbuffers.Builder, players flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(players), 0)
}
func GamePacketStartPlayersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GamePacketAddBoostPads(builder *flatbuffers.Builder, boostPads flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(boostPads), 0)
}
func GamePacketStartBoostPadsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 4)
}
func GamePacketAddBalls(builder *flatbuffers.Builder, balls flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(balls), 0)
}
func GamePacketStartBallsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GamePacketAddMatchInfo(builder *flatbuffers.Builder, matchInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(matchInfo), 0)
}
func GamePacketAddTeams(builder *flatbuffers.Builder, teams flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(teams), 0)
}
func GamePacketStartTeamsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 4)
}
func GamePacketEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
