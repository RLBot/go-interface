// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Notification that a player triggers some in-game event, such as:
///    Win, Loss, TimePlayed;
///    Shot, Assist, Center, Clear, PoolShot;
///    Goal, AerialGoal, BicycleGoal, BulletGoal, BackwardsGoal, LongGoal, OvertimeGoal, TurtleGoal;
///    AerialHit, BicycleHit, BulletHit, JuggleHit, FirstTouch, BallHit;
///    Save, EpicSave, FreezeSave;
///    HatTrick, Savior, Playmaker, MVP;
///    FastestGoal, SlowestGoal, FurthestGoal, OwnGoal;
///    MostBallTouches, FewestBallTouches, MostBoostPickups, FewestBoostPickups, BoostPickups;
///    CarTouches, Demolition, Demolish;
///    LowFive, HighFive;
type PlayerStatEventT struct {
	PlayerIndex uint32 `json:"player_index"`
	StatType string `json:"stat_type"`
}

func (t *PlayerStatEventT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	statTypeOffset := flatbuffers.UOffsetT(0)
	if t.StatType != "" {
		statTypeOffset = builder.CreateString(t.StatType)
	}
	PlayerStatEventStart(builder)
	PlayerStatEventAddPlayerIndex(builder, t.PlayerIndex)
	PlayerStatEventAddStatType(builder, statTypeOffset)
	return PlayerStatEventEnd(builder)
}

func (rcv *PlayerStatEvent) UnPackTo(t *PlayerStatEventT) {
	t.PlayerIndex = rcv.PlayerIndex()
	t.StatType = string(rcv.StatType())
}

func (rcv *PlayerStatEvent) UnPack() *PlayerStatEventT {
	if rcv == nil {
		return nil
	}
	t := &PlayerStatEventT{}
	rcv.UnPackTo(t)
	return t
}

type PlayerStatEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayerStatEvent(buf []byte, offset flatbuffers.UOffsetT) *PlayerStatEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlayerStatEvent{}
	x.Init(buf, n+offset)
	return x
}

func FinishPlayerStatEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPlayerStatEvent(buf []byte, offset flatbuffers.UOffsetT) *PlayerStatEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PlayerStatEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPlayerStatEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PlayerStatEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlayerStatEvent) Table() flatbuffers.Table {
	return rcv._tab
}

/// index of the player associated with the event
func (rcv *PlayerStatEvent) PlayerIndex() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// index of the player associated with the event
func (rcv *PlayerStatEvent) MutatePlayerIndex(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// Event type
func (rcv *PlayerStatEvent) StatType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Event type
func PlayerStatEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PlayerStatEventAddPlayerIndex(builder *flatbuffers.Builder, playerIndex uint32) {
	builder.PrependUint32Slot(0, playerIndex, 0)
}
func PlayerStatEventAddStatType(builder *flatbuffers.Builder, statType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(statType), 0)
}
func PlayerStatEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
