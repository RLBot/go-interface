// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MutatorSettingsT struct {
	MatchLength MatchLength `json:"match_length"`
	MaxScore MaxScore `json:"max_score"`
	OvertimeOption OvertimeOption `json:"overtime_option"`
	SeriesLengthOption SeriesLengthOption `json:"series_length_option"`
	GameSpeedOption GameSpeedOption `json:"game_speed_option"`
	BallMaxSpeedOption BallMaxSpeedOption `json:"ball_max_speed_option"`
	BallTypeOption BallTypeOption `json:"ball_type_option"`
	BallWeightOption BallWeightOption `json:"ball_weight_option"`
	BallSizeOption BallSizeOption `json:"ball_size_option"`
	BallBouncinessOption BallBouncinessOption `json:"ball_bounciness_option"`
	BoostOption BoostOption `json:"boost_option"`
	RumbleOption RumbleOption `json:"rumble_option"`
	BoostStrengthOption BoostStrengthOption `json:"boost_strength_option"`
	GravityOption GravityOption `json:"gravity_option"`
	DemolishOption DemolishOption `json:"demolish_option"`
	RespawnTimeOption RespawnTimeOption `json:"respawn_time_option"`
}

func (t *MutatorSettingsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	MutatorSettingsStart(builder)
	MutatorSettingsAddMatchLength(builder, t.MatchLength)
	MutatorSettingsAddMaxScore(builder, t.MaxScore)
	MutatorSettingsAddOvertimeOption(builder, t.OvertimeOption)
	MutatorSettingsAddSeriesLengthOption(builder, t.SeriesLengthOption)
	MutatorSettingsAddGameSpeedOption(builder, t.GameSpeedOption)
	MutatorSettingsAddBallMaxSpeedOption(builder, t.BallMaxSpeedOption)
	MutatorSettingsAddBallTypeOption(builder, t.BallTypeOption)
	MutatorSettingsAddBallWeightOption(builder, t.BallWeightOption)
	MutatorSettingsAddBallSizeOption(builder, t.BallSizeOption)
	MutatorSettingsAddBallBouncinessOption(builder, t.BallBouncinessOption)
	MutatorSettingsAddBoostOption(builder, t.BoostOption)
	MutatorSettingsAddRumbleOption(builder, t.RumbleOption)
	MutatorSettingsAddBoostStrengthOption(builder, t.BoostStrengthOption)
	MutatorSettingsAddGravityOption(builder, t.GravityOption)
	MutatorSettingsAddDemolishOption(builder, t.DemolishOption)
	MutatorSettingsAddRespawnTimeOption(builder, t.RespawnTimeOption)
	return MutatorSettingsEnd(builder)
}

func (rcv *MutatorSettings) UnPackTo(t *MutatorSettingsT) {
	t.MatchLength = rcv.MatchLength()
	t.MaxScore = rcv.MaxScore()
	t.OvertimeOption = rcv.OvertimeOption()
	t.SeriesLengthOption = rcv.SeriesLengthOption()
	t.GameSpeedOption = rcv.GameSpeedOption()
	t.BallMaxSpeedOption = rcv.BallMaxSpeedOption()
	t.BallTypeOption = rcv.BallTypeOption()
	t.BallWeightOption = rcv.BallWeightOption()
	t.BallSizeOption = rcv.BallSizeOption()
	t.BallBouncinessOption = rcv.BallBouncinessOption()
	t.BoostOption = rcv.BoostOption()
	t.RumbleOption = rcv.RumbleOption()
	t.BoostStrengthOption = rcv.BoostStrengthOption()
	t.GravityOption = rcv.GravityOption()
	t.DemolishOption = rcv.DemolishOption()
	t.RespawnTimeOption = rcv.RespawnTimeOption()
}

func (rcv *MutatorSettings) UnPack() *MutatorSettingsT {
	if rcv == nil {
		return nil
	}
	t := &MutatorSettingsT{}
	rcv.UnPackTo(t)
	return t
}

type MutatorSettings struct {
	_tab flatbuffers.Table
}

func GetRootAsMutatorSettings(buf []byte, offset flatbuffers.UOffsetT) *MutatorSettings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MutatorSettings{}
	x.Init(buf, n+offset)
	return x
}

func FinishMutatorSettingsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMutatorSettings(buf []byte, offset flatbuffers.UOffsetT) *MutatorSettings {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MutatorSettings{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMutatorSettingsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MutatorSettings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MutatorSettings) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MutatorSettings) MatchLength() MatchLength {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return MatchLength(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateMatchLength(n MatchLength) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *MutatorSettings) MaxScore() MaxScore {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return MaxScore(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateMaxScore(n MaxScore) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *MutatorSettings) OvertimeOption() OvertimeOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return OvertimeOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateOvertimeOption(n OvertimeOption) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *MutatorSettings) SeriesLengthOption() SeriesLengthOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return SeriesLengthOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateSeriesLengthOption(n SeriesLengthOption) bool {
	return rcv._tab.MutateByteSlot(10, byte(n))
}

func (rcv *MutatorSettings) GameSpeedOption() GameSpeedOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return GameSpeedOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateGameSpeedOption(n GameSpeedOption) bool {
	return rcv._tab.MutateByteSlot(12, byte(n))
}

func (rcv *MutatorSettings) BallMaxSpeedOption() BallMaxSpeedOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return BallMaxSpeedOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateBallMaxSpeedOption(n BallMaxSpeedOption) bool {
	return rcv._tab.MutateByteSlot(14, byte(n))
}

func (rcv *MutatorSettings) BallTypeOption() BallTypeOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return BallTypeOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateBallTypeOption(n BallTypeOption) bool {
	return rcv._tab.MutateByteSlot(16, byte(n))
}

func (rcv *MutatorSettings) BallWeightOption() BallWeightOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return BallWeightOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateBallWeightOption(n BallWeightOption) bool {
	return rcv._tab.MutateByteSlot(18, byte(n))
}

func (rcv *MutatorSettings) BallSizeOption() BallSizeOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return BallSizeOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateBallSizeOption(n BallSizeOption) bool {
	return rcv._tab.MutateByteSlot(20, byte(n))
}

func (rcv *MutatorSettings) BallBouncinessOption() BallBouncinessOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return BallBouncinessOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateBallBouncinessOption(n BallBouncinessOption) bool {
	return rcv._tab.MutateByteSlot(22, byte(n))
}

func (rcv *MutatorSettings) BoostOption() BoostOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return BoostOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateBoostOption(n BoostOption) bool {
	return rcv._tab.MutateByteSlot(24, byte(n))
}

func (rcv *MutatorSettings) RumbleOption() RumbleOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return RumbleOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateRumbleOption(n RumbleOption) bool {
	return rcv._tab.MutateByteSlot(26, byte(n))
}

func (rcv *MutatorSettings) BoostStrengthOption() BoostStrengthOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return BoostStrengthOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateBoostStrengthOption(n BoostStrengthOption) bool {
	return rcv._tab.MutateByteSlot(28, byte(n))
}

func (rcv *MutatorSettings) GravityOption() GravityOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return GravityOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateGravityOption(n GravityOption) bool {
	return rcv._tab.MutateByteSlot(30, byte(n))
}

func (rcv *MutatorSettings) DemolishOption() DemolishOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return DemolishOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateDemolishOption(n DemolishOption) bool {
	return rcv._tab.MutateByteSlot(32, byte(n))
}

func (rcv *MutatorSettings) RespawnTimeOption() RespawnTimeOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return RespawnTimeOption(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MutatorSettings) MutateRespawnTimeOption(n RespawnTimeOption) bool {
	return rcv._tab.MutateByteSlot(34, byte(n))
}

func MutatorSettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func MutatorSettingsAddMatchLength(builder *flatbuffers.Builder, matchLength MatchLength) {
	builder.PrependByteSlot(0, byte(matchLength), 0)
}
func MutatorSettingsAddMaxScore(builder *flatbuffers.Builder, maxScore MaxScore) {
	builder.PrependByteSlot(1, byte(maxScore), 0)
}
func MutatorSettingsAddOvertimeOption(builder *flatbuffers.Builder, overtimeOption OvertimeOption) {
	builder.PrependByteSlot(2, byte(overtimeOption), 0)
}
func MutatorSettingsAddSeriesLengthOption(builder *flatbuffers.Builder, seriesLengthOption SeriesLengthOption) {
	builder.PrependByteSlot(3, byte(seriesLengthOption), 0)
}
func MutatorSettingsAddGameSpeedOption(builder *flatbuffers.Builder, gameSpeedOption GameSpeedOption) {
	builder.PrependByteSlot(4, byte(gameSpeedOption), 0)
}
func MutatorSettingsAddBallMaxSpeedOption(builder *flatbuffers.Builder, ballMaxSpeedOption BallMaxSpeedOption) {
	builder.PrependByteSlot(5, byte(ballMaxSpeedOption), 0)
}
func MutatorSettingsAddBallTypeOption(builder *flatbuffers.Builder, ballTypeOption BallTypeOption) {
	builder.PrependByteSlot(6, byte(ballTypeOption), 0)
}
func MutatorSettingsAddBallWeightOption(builder *flatbuffers.Builder, ballWeightOption BallWeightOption) {
	builder.PrependByteSlot(7, byte(ballWeightOption), 0)
}
func MutatorSettingsAddBallSizeOption(builder *flatbuffers.Builder, ballSizeOption BallSizeOption) {
	builder.PrependByteSlot(8, byte(ballSizeOption), 0)
}
func MutatorSettingsAddBallBouncinessOption(builder *flatbuffers.Builder, ballBouncinessOption BallBouncinessOption) {
	builder.PrependByteSlot(9, byte(ballBouncinessOption), 0)
}
func MutatorSettingsAddBoostOption(builder *flatbuffers.Builder, boostOption BoostOption) {
	builder.PrependByteSlot(10, byte(boostOption), 0)
}
func MutatorSettingsAddRumbleOption(builder *flatbuffers.Builder, rumbleOption RumbleOption) {
	builder.PrependByteSlot(11, byte(rumbleOption), 0)
}
func MutatorSettingsAddBoostStrengthOption(builder *flatbuffers.Builder, boostStrengthOption BoostStrengthOption) {
	builder.PrependByteSlot(12, byte(boostStrengthOption), 0)
}
func MutatorSettingsAddGravityOption(builder *flatbuffers.Builder, gravityOption GravityOption) {
	builder.PrependByteSlot(13, byte(gravityOption), 0)
}
func MutatorSettingsAddDemolishOption(builder *flatbuffers.Builder, demolishOption DemolishOption) {
	builder.PrependByteSlot(14, byte(demolishOption), 0)
}
func MutatorSettingsAddRespawnTimeOption(builder *flatbuffers.Builder, respawnTimeOption RespawnTimeOption) {
	builder.PrependByteSlot(15, byte(respawnTimeOption), 0)
}
func MutatorSettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
