// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A RenderMessage for a rectangle in 2D space.
/// Note that the position and size is given in screen-space coordinates.
type Rect2DT struct {
	X float32 `json:"x"`
	Y float32 `json:"y"`
	Width float32 `json:"width"`
	Height float32 `json:"height"`
	Color *ColorT `json:"color"`
	HAlign TextHAlign `json:"h_align"`
	VAlign TextVAlign `json:"v_align"`
}

func (t *Rect2DT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	Rect2DStart(builder)
	Rect2DAddX(builder, t.X)
	Rect2DAddY(builder, t.Y)
	Rect2DAddWidth(builder, t.Width)
	Rect2DAddHeight(builder, t.Height)
	colorOffset := t.Color.Pack(builder)
	Rect2DAddColor(builder, colorOffset)
	Rect2DAddHAlign(builder, t.HAlign)
	Rect2DAddVAlign(builder, t.VAlign)
	return Rect2DEnd(builder)
}

func (rcv *Rect2D) UnPackTo(t *Rect2DT) {
	t.X = rcv.X()
	t.Y = rcv.Y()
	t.Width = rcv.Width()
	t.Height = rcv.Height()
	t.Color = rcv.Color(nil).UnPack()
	t.HAlign = rcv.HAlign()
	t.VAlign = rcv.VAlign()
}

func (rcv *Rect2D) UnPack() *Rect2DT {
	if rcv == nil {
		return nil
	}
	t := &Rect2DT{}
	rcv.UnPackTo(t)
	return t
}

type Rect2D struct {
	_tab flatbuffers.Table
}

func GetRootAsRect2D(buf []byte, offset flatbuffers.UOffsetT) *Rect2D {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Rect2D{}
	x.Init(buf, n+offset)
	return x
}

func FinishRect2DBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRect2D(buf []byte, offset flatbuffers.UOffsetT) *Rect2D {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Rect2D{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRect2DBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Rect2D) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Rect2D) Table() flatbuffers.Table {
	return rcv._tab
}

/// Screen-space x coordinate such that x=0 is left edge and x=1 is right edge of window.
func (rcv *Rect2D) X() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Screen-space x coordinate such that x=0 is left edge and x=1 is right edge of window.
func (rcv *Rect2D) MutateX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

/// Screen-space y coordinate such that y=0 is top edge and y=1 is bottom edge of window.
func (rcv *Rect2D) Y() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Screen-space y coordinate such that y=0 is top edge and y=1 is bottom edge of window.
func (rcv *Rect2D) MutateY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

/// Screen-space size such that width=0.1 is 10% of window width.
func (rcv *Rect2D) Width() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Screen-space size such that width=0.1 is 10% of window width.
func (rcv *Rect2D) MutateWidth(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

/// Screen-space size such that height=0.1 is 10% of window height.
func (rcv *Rect2D) Height() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Screen-space size such that height=0.1 is 10% of window height.
func (rcv *Rect2D) MutateHeight(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

/// Color of the rectangle.
func (rcv *Rect2D) Color(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Color of the rectangle.
/// The horizontal alignment of the rectangle.
func (rcv *Rect2D) HAlign() TextHAlign {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return TextHAlign(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

/// The horizontal alignment of the rectangle.
func (rcv *Rect2D) MutateHAlign(n TextHAlign) bool {
	return rcv._tab.MutateByteSlot(14, byte(n))
}

/// The vertical alignment of the rectangle.
func (rcv *Rect2D) VAlign() TextVAlign {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return TextVAlign(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

/// The vertical alignment of the rectangle.
func (rcv *Rect2D) MutateVAlign(n TextVAlign) bool {
	return rcv._tab.MutateByteSlot(16, byte(n))
}

func Rect2DStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func Rect2DAddX(builder *flatbuffers.Builder, x float32) {
	builder.PrependFloat32Slot(0, x, 0.0)
}
func Rect2DAddY(builder *flatbuffers.Builder, y float32) {
	builder.PrependFloat32Slot(1, y, 0.0)
}
func Rect2DAddWidth(builder *flatbuffers.Builder, width float32) {
	builder.PrependFloat32Slot(2, width, 0.0)
}
func Rect2DAddHeight(builder *flatbuffers.Builder, height float32) {
	builder.PrependFloat32Slot(3, height, 0.0)
}
func Rect2DAddColor(builder *flatbuffers.Builder, color flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(color), 0)
}
func Rect2DAddHAlign(builder *flatbuffers.Builder, hAlign TextHAlign) {
	builder.PrependByteSlot(5, byte(hAlign), 0)
}
func Rect2DAddVAlign(builder *flatbuffers.Builder, vAlign TextVAlign) {
	builder.PrependByteSlot(6, byte(vAlign), 0)
}
func Rect2DEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
