// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Sent when connecting to RLBot to indicate what type of messages are desired.
/// This could be sent by a bot, or a bot manager governing several bots, an
/// overlay, or any other utility that connects to the RLBot process.
type ReadyMessageT struct {
	WantsBallPredictions bool `json:"wants_ball_predictions"`
	WantsComms bool `json:"wants_comms"`
	CloseAfterMatch bool `json:"close_after_match"`
}

func (t *ReadyMessageT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	ReadyMessageStart(builder)
	ReadyMessageAddWantsBallPredictions(builder, t.WantsBallPredictions)
	ReadyMessageAddWantsComms(builder, t.WantsComms)
	ReadyMessageAddCloseAfterMatch(builder, t.CloseAfterMatch)
	return ReadyMessageEnd(builder)
}

func (rcv *ReadyMessage) UnPackTo(t *ReadyMessageT) {
	t.WantsBallPredictions = rcv.WantsBallPredictions()
	t.WantsComms = rcv.WantsComms()
	t.CloseAfterMatch = rcv.CloseAfterMatch()
}

func (rcv *ReadyMessage) UnPack() *ReadyMessageT {
	if rcv == nil {
		return nil
	}
	t := &ReadyMessageT{}
	rcv.UnPackTo(t)
	return t
}

type ReadyMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsReadyMessage(buf []byte, offset flatbuffers.UOffsetT) *ReadyMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReadyMessage{}
	x.Init(buf, n+offset)
	return x
}

func FinishReadyMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsReadyMessage(buf []byte, offset flatbuffers.UOffsetT) *ReadyMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ReadyMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedReadyMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ReadyMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ReadyMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ReadyMessage) WantsBallPredictions() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ReadyMessage) MutateWantsBallPredictions(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *ReadyMessage) WantsComms() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ReadyMessage) MutateWantsComms(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *ReadyMessage) CloseAfterMatch() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ReadyMessage) MutateCloseAfterMatch(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func ReadyMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ReadyMessageAddWantsBallPredictions(builder *flatbuffers.Builder, wantsBallPredictions bool) {
	builder.PrependBoolSlot(0, wantsBallPredictions, false)
}
func ReadyMessageAddWantsComms(builder *flatbuffers.Builder, wantsComms bool) {
	builder.PrependBoolSlot(1, wantsComms, false)
}
func ReadyMessageAddCloseAfterMatch(builder *flatbuffers.Builder, closeAfterMatch bool) {
	builder.PrependBoolSlot(2, closeAfterMatch, false)
}
func ReadyMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
