// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TeamInfoT struct {
	TeamIndex uint32 `json:"team_index"`
	Score uint32 `json:"score"`
}

func (t *TeamInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	TeamInfoStart(builder)
	TeamInfoAddTeamIndex(builder, t.TeamIndex)
	TeamInfoAddScore(builder, t.Score)
	return TeamInfoEnd(builder)
}

func (rcv *TeamInfo) UnPackTo(t *TeamInfoT) {
	t.TeamIndex = rcv.TeamIndex()
	t.Score = rcv.Score()
}

func (rcv *TeamInfo) UnPack() *TeamInfoT {
	if rcv == nil {
		return nil
	}
	t := &TeamInfoT{}
	rcv.UnPackTo(t)
	return t
}

type TeamInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsTeamInfo(buf []byte, offset flatbuffers.UOffsetT) *TeamInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TeamInfo{}
	x.Init(buf, n+offset)
	return x
}

func FinishTeamInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsTeamInfo(buf []byte, offset flatbuffers.UOffsetT) *TeamInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TeamInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTeamInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *TeamInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TeamInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TeamInfo) TeamIndex() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TeamInfo) MutateTeamIndex(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// number of goals scored.
func (rcv *TeamInfo) Score() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// number of goals scored.
func (rcv *TeamInfo) MutateScore(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func TeamInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TeamInfoAddTeamIndex(builder *flatbuffers.Builder, teamIndex uint32) {
	builder.PrependUint32Slot(0, teamIndex, 0)
}
func TeamInfoAddScore(builder *flatbuffers.Builder, score uint32) {
	builder.PrependUint32Slot(1, score, 0)
}
func TeamInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
