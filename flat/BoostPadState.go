// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BoostPadStateT struct {
	IsActive bool `json:"is_active"`
	Timer float32 `json:"timer"`
}

func (t *BoostPadStateT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	BoostPadStateStart(builder)
	BoostPadStateAddIsActive(builder, t.IsActive)
	BoostPadStateAddTimer(builder, t.Timer)
	return BoostPadStateEnd(builder)
}

func (rcv *BoostPadState) UnPackTo(t *BoostPadStateT) {
	t.IsActive = rcv.IsActive()
	t.Timer = rcv.Timer()
}

func (rcv *BoostPadState) UnPack() *BoostPadStateT {
	if rcv == nil {
		return nil
	}
	t := &BoostPadStateT{}
	rcv.UnPackTo(t)
	return t
}

type BoostPadState struct {
	_tab flatbuffers.Table
}

func GetRootAsBoostPadState(buf []byte, offset flatbuffers.UOffsetT) *BoostPadState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BoostPadState{}
	x.Init(buf, n+offset)
	return x
}

func FinishBoostPadStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBoostPadState(buf []byte, offset flatbuffers.UOffsetT) *BoostPadState {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BoostPadState{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBoostPadStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *BoostPadState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BoostPadState) Table() flatbuffers.Table {
	return rcv._tab
}

/// True if the boost can be picked up
func (rcv *BoostPadState) IsActive() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// True if the boost can be picked up
func (rcv *BoostPadState) MutateIsActive(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// The number of seconds since the boost has been picked up, or 0.0 if the boost is active.
func (rcv *BoostPadState) Timer() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The number of seconds since the boost has been picked up, or 0.0 if the boost is active.
func (rcv *BoostPadState) MutateTimer(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func BoostPadStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BoostPadStateAddIsActive(builder *flatbuffers.Builder, isActive bool) {
	builder.PrependBoolSlot(0, isActive, false)
}
func BoostPadStateAddTimer(builder *flatbuffers.Builder, timer float32) {
	builder.PrependFloat32Slot(1, timer, 0.0)
}
func BoostPadStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
