// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StartCommandT struct {
	ConfigPath string `json:"config_path"`
}

func (t *StartCommandT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	configPathOffset := flatbuffers.UOffsetT(0)
	if t.ConfigPath != "" {
		configPathOffset = builder.CreateString(t.ConfigPath)
	}
	StartCommandStart(builder)
	StartCommandAddConfigPath(builder, configPathOffset)
	return StartCommandEnd(builder)
}

func (rcv *StartCommand) UnPackTo(t *StartCommandT) {
	t.ConfigPath = string(rcv.ConfigPath())
}

func (rcv *StartCommand) UnPack() *StartCommandT {
	if rcv == nil {
		return nil
	}
	t := &StartCommandT{}
	rcv.UnPackTo(t)
	return t
}

type StartCommand struct {
	_tab flatbuffers.Table
}

func GetRootAsStartCommand(buf []byte, offset flatbuffers.UOffsetT) *StartCommand {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StartCommand{}
	x.Init(buf, n+offset)
	return x
}

func FinishStartCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsStartCommand(buf []byte, offset flatbuffers.UOffsetT) *StartCommand {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StartCommand{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStartCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *StartCommand) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StartCommand) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StartCommand) ConfigPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func StartCommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func StartCommandAddConfigPath(builder *flatbuffers.Builder, configPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(configPath), 0)
}
func StartCommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
