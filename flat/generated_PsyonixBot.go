// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A Psyonix bot, e.g. All Star bot.
type PsyonixBotT struct {
	Name string `json:"name"`
	Loadout *PlayerLoadoutT `json:"loadout"`
	BotSkill PsyonixSkill `json:"bot_skill"`
}

func (t *PsyonixBotT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	loadoutOffset := t.Loadout.Pack(builder)
	PsyonixBotStart(builder)
	PsyonixBotAddName(builder, nameOffset)
	PsyonixBotAddLoadout(builder, loadoutOffset)
	PsyonixBotAddBotSkill(builder, t.BotSkill)
	return PsyonixBotEnd(builder)
}

func (rcv *PsyonixBot) UnPackTo(t *PsyonixBotT) {
	t.Name = string(rcv.Name())
	t.Loadout = rcv.Loadout(nil).UnPack()
	t.BotSkill = rcv.BotSkill()
}

func (rcv *PsyonixBot) UnPack() *PsyonixBotT {
	if rcv == nil {
		return nil
	}
	t := &PsyonixBotT{}
	rcv.UnPackTo(t)
	return t
}

type PsyonixBot struct {
	_tab flatbuffers.Table
}

func GetRootAsPsyonixBot(buf []byte, offset flatbuffers.UOffsetT) *PsyonixBot {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PsyonixBot{}
	x.Init(buf, n+offset)
	return x
}

func FinishPsyonixBotBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPsyonixBot(buf []byte, offset flatbuffers.UOffsetT) *PsyonixBot {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PsyonixBot{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPsyonixBotBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PsyonixBot) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PsyonixBot) Table() flatbuffers.Table {
	return rcv._tab
}

/// Requested bot name. When match start, RLBot will ensure each bot has a unique name; bots with
/// duplicate names will be renamed with a suffix like `(2)`. For psyonix bots, a blank name will
/// be replaced with one of the official names.
func (rcv *PsyonixBot) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Requested bot name. When match start, RLBot will ensure each bot has a unique name; bots with
/// duplicate names will be renamed with a suffix like `(2)`. For psyonix bots, a blank name will
/// be replaced with one of the official names.
/// The loadout of the player.
func (rcv *PsyonixBot) Loadout(obj *PlayerLoadout) *PlayerLoadout {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(PlayerLoadout)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// The loadout of the player.
func (rcv *PsyonixBot) BotSkill() PsyonixSkill {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return PsyonixSkill(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *PsyonixBot) MutateBotSkill(n PsyonixSkill) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func PsyonixBotStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PsyonixBotAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func PsyonixBotAddLoadout(builder *flatbuffers.Builder, loadout flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(loadout), 0)
}
func PsyonixBotAddBotSkill(builder *flatbuffers.Builder, botSkill PsyonixSkill) {
	builder.PrependByteSlot(2, byte(botSkill), 0)
}
func PsyonixBotEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
