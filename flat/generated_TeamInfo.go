// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TeamInfoT struct {
	TeamIndex uint32 `json:"team_index"`
	Score uint32 `json:"score"`
}

func (t *TeamInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateTeamInfo(builder, t.TeamIndex, t.Score)
}
func (rcv *TeamInfo) UnPackTo(t *TeamInfoT) {
	t.TeamIndex = rcv.TeamIndex()
	t.Score = rcv.Score()
}

func (rcv *TeamInfo) UnPack() *TeamInfoT {
	if rcv == nil {
		return nil
	}
	t := &TeamInfoT{}
	rcv.UnPackTo(t)
	return t
}

type TeamInfo struct {
	_tab flatbuffers.Struct
}

func (rcv *TeamInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TeamInfo) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *TeamInfo) TeamIndex() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *TeamInfo) MutateTeamIndex(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

/// number of goals scored.
func (rcv *TeamInfo) Score() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
/// number of goals scored.
func (rcv *TeamInfo) MutateScore(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func CreateTeamInfo(builder *flatbuffers.Builder, teamIndex uint32, score uint32) flatbuffers.UOffsetT {
	builder.Prep(4, 8)
	builder.PrependUint32(score)
	builder.PrependUint32(teamIndex)
	return builder.Offset()
}
