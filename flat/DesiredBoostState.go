// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DesiredBoostStateT struct {
	RespawnTime *FloatT `json:"respawn_time"`
}

func (t *DesiredBoostStateT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	DesiredBoostStateStart(builder)
	respawnTimeOffset := t.RespawnTime.Pack(builder)
	DesiredBoostStateAddRespawnTime(builder, respawnTimeOffset)
	return DesiredBoostStateEnd(builder)
}

func (rcv *DesiredBoostState) UnPackTo(t *DesiredBoostStateT) {
	t.RespawnTime = rcv.RespawnTime(nil).UnPack()
}

func (rcv *DesiredBoostState) UnPack() *DesiredBoostStateT {
	if rcv == nil {
		return nil
	}
	t := &DesiredBoostStateT{}
	rcv.UnPackTo(t)
	return t
}

type DesiredBoostState struct {
	_tab flatbuffers.Table
}

func GetRootAsDesiredBoostState(buf []byte, offset flatbuffers.UOffsetT) *DesiredBoostState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DesiredBoostState{}
	x.Init(buf, n+offset)
	return x
}

func FinishDesiredBoostStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDesiredBoostState(buf []byte, offset flatbuffers.UOffsetT) *DesiredBoostState {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DesiredBoostState{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDesiredBoostStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DesiredBoostState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DesiredBoostState) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DesiredBoostState) RespawnTime(obj *Float) *Float {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Float)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DesiredBoostStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func DesiredBoostStateAddRespawnTime(builder *flatbuffers.Builder, respawnTime flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(respawnTime), 0)
}
func DesiredBoostStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
