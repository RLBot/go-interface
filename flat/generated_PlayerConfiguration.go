// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A PlayerConfiguration defines a player of a match.
type PlayerConfigurationT struct {
	Variety *PlayerClassT `json:"variety"`
	Team uint32 `json:"team"`
	PlayerId int32 `json:"player_id"`
}

func (t *PlayerConfigurationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	varietyOffset := t.Variety.Pack(builder)

	PlayerConfigurationStart(builder)
	if t.Variety != nil {
		PlayerConfigurationAddVarietyType(builder, t.Variety.Type)
	}
	PlayerConfigurationAddVariety(builder, varietyOffset)
	PlayerConfigurationAddTeam(builder, t.Team)
	PlayerConfigurationAddPlayerId(builder, t.PlayerId)
	return PlayerConfigurationEnd(builder)
}

func (rcv *PlayerConfiguration) UnPackTo(t *PlayerConfigurationT) {
	varietyTable := flatbuffers.Table{}
	if rcv.Variety(&varietyTable) {
		t.Variety = rcv.VarietyType().UnPack(varietyTable)
	}
	t.Team = rcv.Team()
	t.PlayerId = rcv.PlayerId()
}

func (rcv *PlayerConfiguration) UnPack() *PlayerConfigurationT {
	if rcv == nil {
		return nil
	}
	t := &PlayerConfigurationT{}
	rcv.UnPackTo(t)
	return t
}

type PlayerConfiguration struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayerConfiguration(buf []byte, offset flatbuffers.UOffsetT) *PlayerConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlayerConfiguration{}
	x.Init(buf, n+offset)
	return x
}

func FinishPlayerConfigurationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPlayerConfiguration(buf []byte, offset flatbuffers.UOffsetT) *PlayerConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PlayerConfiguration{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPlayerConfigurationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PlayerConfiguration) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlayerConfiguration) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PlayerConfiguration) VarietyType() PlayerClass {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return PlayerClass(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *PlayerConfiguration) MutateVarietyType(n PlayerClass) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

/// The type of the player, i.e. human, Psyonix bot, or a custom bot.
func (rcv *PlayerConfiguration) Variety(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

/// The type of the player, i.e. human, Psyonix bot, or a custom bot.
/// The team of the player. Blue is 0, orange is 1.
func (rcv *PlayerConfiguration) Team() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The team of the player. Blue is 0, orange is 1.
func (rcv *PlayerConfiguration) MutateTeam(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

/// The value will be set by RLBot and is always overriden.
/// This value is mostly used internally to keep track of participants in the match.
/// The player id can be used to find the corresponding player in the GamePacket.
func (rcv *PlayerConfiguration) PlayerId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The value will be set by RLBot and is always overriden.
/// This value is mostly used internally to keep track of participants in the match.
/// The player id can be used to find the corresponding player in the GamePacket.
func (rcv *PlayerConfiguration) MutatePlayerId(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func PlayerConfigurationStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func PlayerConfigurationAddVarietyType(builder *flatbuffers.Builder, varietyType PlayerClass) {
	builder.PrependByteSlot(0, byte(varietyType), 0)
}
func PlayerConfigurationAddVariety(builder *flatbuffers.Builder, variety flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(variety), 0)
}
func PlayerConfigurationAddTeam(builder *flatbuffers.Builder, team uint32) {
	builder.PrependUint32Slot(2, team, 0)
}
func PlayerConfigurationAddPlayerId(builder *flatbuffers.Builder, playerId int32) {
	builder.PrependInt32Slot(3, playerId, 0)
}
func PlayerConfigurationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
