// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Expresses the rotation state of an object in Euler angles, with values in radians.
type RotatorT struct {
	Pitch float32 `json:"pitch"`
	Yaw float32 `json:"yaw"`
	Roll float32 `json:"roll"`
}

func (t *RotatorT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateRotator(builder, t.Pitch, t.Yaw, t.Roll)
}
func (rcv *Rotator) UnPackTo(t *RotatorT) {
	t.Pitch = rcv.Pitch()
	t.Yaw = rcv.Yaw()
	t.Roll = rcv.Roll()
}

func (rcv *Rotator) UnPack() *RotatorT {
	if rcv == nil {
		return nil
	}
	t := &RotatorT{}
	rcv.UnPackTo(t)
	return t
}

type Rotator struct {
	_tab flatbuffers.Struct
}

func (rcv *Rotator) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Rotator) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Rotator) Pitch() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Rotator) MutatePitch(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Rotator) Yaw() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *Rotator) MutateYaw(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *Rotator) Roll() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *Rotator) MutateRoll(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func CreateRotator(builder *flatbuffers.Builder, pitch float32, yaw float32, roll float32) flatbuffers.UOffsetT {
	builder.Prep(4, 12)
	builder.PrependFloat32(roll)
	builder.PrependFloat32(yaw)
	builder.PrependFloat32(pitch)
	return builder.Offset()
}
