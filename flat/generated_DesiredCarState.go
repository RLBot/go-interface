// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DesiredCarStateT struct {
	Physics *DesiredPhysicsT `json:"physics"`
	BoostAmount *FloatT `json:"boost_amount"`
}

func (t *DesiredCarStateT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	physicsOffset := t.Physics.Pack(builder)
	DesiredCarStateStart(builder)
	DesiredCarStateAddPhysics(builder, physicsOffset)
	boostAmountOffset := t.BoostAmount.Pack(builder)
	DesiredCarStateAddBoostAmount(builder, boostAmountOffset)
	return DesiredCarStateEnd(builder)
}

func (rcv *DesiredCarState) UnPackTo(t *DesiredCarStateT) {
	t.Physics = rcv.Physics(nil).UnPack()
	t.BoostAmount = rcv.BoostAmount(nil).UnPack()
}

func (rcv *DesiredCarState) UnPack() *DesiredCarStateT {
	if rcv == nil {
		return nil
	}
	t := &DesiredCarStateT{}
	rcv.UnPackTo(t)
	return t
}

type DesiredCarState struct {
	_tab flatbuffers.Table
}

func GetRootAsDesiredCarState(buf []byte, offset flatbuffers.UOffsetT) *DesiredCarState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DesiredCarState{}
	x.Init(buf, n+offset)
	return x
}

func FinishDesiredCarStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDesiredCarState(buf []byte, offset flatbuffers.UOffsetT) *DesiredCarState {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DesiredCarState{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDesiredCarStateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DesiredCarState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DesiredCarState) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DesiredCarState) Physics(obj *DesiredPhysics) *DesiredPhysics {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DesiredPhysics)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DesiredCarState) BoostAmount(obj *Float) *Float {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Float)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DesiredCarStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DesiredCarStateAddPhysics(builder *flatbuffers.Builder, physics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(physics), 0)
}
func DesiredCarStateAddBoostAmount(builder *flatbuffers.Builder, boostAmount flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(boostAmount), 0)
}
func DesiredCarStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
