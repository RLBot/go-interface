// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
	"strconv"
)

/// Possible player types.
type PlayerClass byte

const (
	PlayerClassNONE       PlayerClass = 0
	PlayerClassHuman      PlayerClass = 1
	PlayerClassCustomBot  PlayerClass = 2
	PlayerClassPsyonixBot PlayerClass = 3
)

var EnumNamesPlayerClass = map[PlayerClass]string{
	PlayerClassNONE:       "NONE",
	PlayerClassHuman:      "Human",
	PlayerClassCustomBot:  "CustomBot",
	PlayerClassPsyonixBot: "PsyonixBot",
}

var EnumValuesPlayerClass = map[string]PlayerClass{
	"NONE":       PlayerClassNONE,
	"Human":      PlayerClassHuman,
	"CustomBot":  PlayerClassCustomBot,
	"PsyonixBot": PlayerClassPsyonixBot,
}

func (v PlayerClass) String() string {
	if s, ok := EnumNamesPlayerClass[v]; ok {
		return s
	}
	return "PlayerClass(" + strconv.FormatInt(int64(v), 10) + ")"
}

type PlayerClassT struct {
	Type PlayerClass
	Value interface{}
}

func (t *PlayerClassT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case PlayerClassHuman:
		return t.Value.(*HumanT).Pack(builder)
	case PlayerClassCustomBot:
		return t.Value.(*CustomBotT).Pack(builder)
	case PlayerClassPsyonixBot:
		return t.Value.(*PsyonixBotT).Pack(builder)
	}
	return 0
}

func (rcv PlayerClass) UnPack(table flatbuffers.Table) *PlayerClassT {
	switch rcv {
	case PlayerClassHuman:
		var x Human
		x.Init(table.Bytes, table.Pos)
		return &PlayerClassT{Type: PlayerClassHuman, Value: x.UnPack()}
	case PlayerClassCustomBot:
		var x CustomBot
		x.Init(table.Bytes, table.Pos)
		return &PlayerClassT{Type: PlayerClassCustomBot, Value: x.UnPack()}
	case PlayerClassPsyonixBot:
		var x PsyonixBot
		x.Init(table.Bytes, table.Pos)
		return &PlayerClassT{Type: PlayerClassPsyonixBot, Value: x.UnPack()}
	}
	return nil
}
