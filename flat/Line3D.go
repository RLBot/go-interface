// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Line3DT struct {
	Start *Vector3T `json:"start"`
	End *Vector3T `json:"end"`
	Color *ColorT `json:"color"`
}

func (t *Line3DT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	colorOffset := t.Color.Pack(builder)
	Line3DStart(builder)
	startOffset := t.Start.Pack(builder)
	Line3DAddStart(builder, startOffset)
	endOffset := t.End.Pack(builder)
	Line3DAddEnd(builder, endOffset)
	Line3DAddColor(builder, colorOffset)
	return Line3DEnd(builder)
}

func (rcv *Line3D) UnPackTo(t *Line3DT) {
	t.Start = rcv.Start(nil).UnPack()
	t.End = rcv.End(nil).UnPack()
	t.Color = rcv.Color(nil).UnPack()
}

func (rcv *Line3D) UnPack() *Line3DT {
	if rcv == nil {
		return nil
	}
	t := &Line3DT{}
	rcv.UnPackTo(t)
	return t
}

type Line3D struct {
	_tab flatbuffers.Table
}

func GetRootAsLine3D(buf []byte, offset flatbuffers.UOffsetT) *Line3D {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Line3D{}
	x.Init(buf, n+offset)
	return x
}

func FinishLine3DBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsLine3D(buf []byte, offset flatbuffers.UOffsetT) *Line3D {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Line3D{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLine3DBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Line3D) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Line3D) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Line3D) Start(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Line3D) End(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Line3D) Color(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func Line3DStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func Line3DAddStart(builder *flatbuffers.Builder, start flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(start), 0)
}
func Line3DAddEnd(builder *flatbuffers.Builder, end flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(end), 0)
}
func Line3DAddColor(builder *flatbuffers.Builder, color flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(color), 0)
}
func Line3DEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
