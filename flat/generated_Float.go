// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A floating point value located in a separate struct allowing for optional floats elsewhere.
type FloatT struct {
	Val float32 `json:"val"`
}

func (t *FloatT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateFloat(builder, t.Val)
}
func (rcv *Float) UnPackTo(t *FloatT) {
	t.Val = rcv.Val()
}

func (rcv *Float) UnPack() *FloatT {
	if rcv == nil {
		return nil
	}
	t := &FloatT{}
	rcv.UnPackTo(t)
	return t
}

type Float struct {
	_tab flatbuffers.Struct
}

func (rcv *Float) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Float) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Float) Val() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Float) MutateVal(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func CreateFloat(builder *flatbuffers.Builder, val float32) flatbuffers.UOffsetT {
	builder.Prep(4, 4)
	builder.PrependFloat32(val)
	return builder.Offset()
}
