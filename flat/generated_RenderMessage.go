// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A RenderMessage, describing a piece of debug rendering.
type RenderMessageT struct {
	Variety *RenderTypeT `json:"variety"`
}

func (t *RenderMessageT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	varietyOffset := t.Variety.Pack(builder)

	RenderMessageStart(builder)
	if t.Variety != nil {
		RenderMessageAddVarietyType(builder, t.Variety.Type)
	}
	RenderMessageAddVariety(builder, varietyOffset)
	return RenderMessageEnd(builder)
}

func (rcv *RenderMessage) UnPackTo(t *RenderMessageT) {
	varietyTable := flatbuffers.Table{}
	if rcv.Variety(&varietyTable) {
		t.Variety = rcv.VarietyType().UnPack(varietyTable)
	}
}

func (rcv *RenderMessage) UnPack() *RenderMessageT {
	if rcv == nil {
		return nil
	}
	t := &RenderMessageT{}
	rcv.UnPackTo(t)
	return t
}

type RenderMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsRenderMessage(buf []byte, offset flatbuffers.UOffsetT) *RenderMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RenderMessage{}
	x.Init(buf, n+offset)
	return x
}

func FinishRenderMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRenderMessage(buf []byte, offset flatbuffers.UOffsetT) *RenderMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RenderMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRenderMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RenderMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RenderMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RenderMessage) VarietyType() RenderType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return RenderType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *RenderMessage) MutateVarietyType(n RenderType) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *RenderMessage) Variety(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func RenderMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RenderMessageAddVarietyType(builder *flatbuffers.Builder, varietyType RenderType) {
	builder.PrependByteSlot(0, byte(varietyType), 0)
}
func RenderMessageAddVariety(builder *flatbuffers.Builder, variety flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(variety), 0)
}
func RenderMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
