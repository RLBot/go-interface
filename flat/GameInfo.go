// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameInfoT struct {
	SecondsElapsed float32 `json:"seconds_elapsed"`
	GameTimeRemaining float32 `json:"game_time_remaining"`
	IsOvertime bool `json:"is_overtime"`
	IsUnlimitedTime bool `json:"is_unlimited_time"`
	GameStateType GameStateType `json:"game_state_type"`
	WorldGravityZ float32 `json:"world_gravity_z"`
	GameSpeed float32 `json:"game_speed"`
	FrameNum uint32 `json:"frame_num"`
}

func (t *GameInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	GameInfoStart(builder)
	GameInfoAddSecondsElapsed(builder, t.SecondsElapsed)
	GameInfoAddGameTimeRemaining(builder, t.GameTimeRemaining)
	GameInfoAddIsOvertime(builder, t.IsOvertime)
	GameInfoAddIsUnlimitedTime(builder, t.IsUnlimitedTime)
	GameInfoAddGameStateType(builder, t.GameStateType)
	GameInfoAddWorldGravityZ(builder, t.WorldGravityZ)
	GameInfoAddGameSpeed(builder, t.GameSpeed)
	GameInfoAddFrameNum(builder, t.FrameNum)
	return GameInfoEnd(builder)
}

func (rcv *GameInfo) UnPackTo(t *GameInfoT) {
	t.SecondsElapsed = rcv.SecondsElapsed()
	t.GameTimeRemaining = rcv.GameTimeRemaining()
	t.IsOvertime = rcv.IsOvertime()
	t.IsUnlimitedTime = rcv.IsUnlimitedTime()
	t.GameStateType = rcv.GameStateType()
	t.WorldGravityZ = rcv.WorldGravityZ()
	t.GameSpeed = rcv.GameSpeed()
	t.FrameNum = rcv.FrameNum()
}

func (rcv *GameInfo) UnPack() *GameInfoT {
	if rcv == nil {
		return nil
	}
	t := &GameInfoT{}
	rcv.UnPackTo(t)
	return t
}

type GameInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsGameInfo(buf []byte, offset flatbuffers.UOffsetT) *GameInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameInfo{}
	x.Init(buf, n+offset)
	return x
}

func FinishGameInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGameInfo(buf []byte, offset flatbuffers.UOffsetT) *GameInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GameInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGameInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GameInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GameInfo) SecondsElapsed() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GameInfo) MutateSecondsElapsed(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *GameInfo) GameTimeRemaining() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GameInfo) MutateGameTimeRemaining(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *GameInfo) IsOvertime() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GameInfo) MutateIsOvertime(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *GameInfo) IsUnlimitedTime() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GameInfo) MutateIsUnlimitedTime(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *GameInfo) GameStateType() GameStateType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return GameStateType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GameInfo) MutateGameStateType(n GameStateType) bool {
	return rcv._tab.MutateByteSlot(12, byte(n))
}

func (rcv *GameInfo) WorldGravityZ() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GameInfo) MutateWorldGravityZ(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

/// Game speed multiplier, 1.0 is regular game speed.
func (rcv *GameInfo) GameSpeed() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Game speed multiplier, 1.0 is regular game speed.
func (rcv *GameInfo) MutateGameSpeed(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

/// Tracks the number of physics frames the game has computed.
/// May increase by more than one across consecutive packets.
/// Data type will roll over after 207 days at 120Hz.
func (rcv *GameInfo) FrameNum() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Tracks the number of physics frames the game has computed.
/// May increase by more than one across consecutive packets.
/// Data type will roll over after 207 days at 120Hz.
func (rcv *GameInfo) MutateFrameNum(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func GameInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func GameInfoAddSecondsElapsed(builder *flatbuffers.Builder, secondsElapsed float32) {
	builder.PrependFloat32Slot(0, secondsElapsed, 0.0)
}
func GameInfoAddGameTimeRemaining(builder *flatbuffers.Builder, gameTimeRemaining float32) {
	builder.PrependFloat32Slot(1, gameTimeRemaining, 0.0)
}
func GameInfoAddIsOvertime(builder *flatbuffers.Builder, isOvertime bool) {
	builder.PrependBoolSlot(2, isOvertime, false)
}
func GameInfoAddIsUnlimitedTime(builder *flatbuffers.Builder, isUnlimitedTime bool) {
	builder.PrependBoolSlot(3, isUnlimitedTime, false)
}
func GameInfoAddGameStateType(builder *flatbuffers.Builder, gameStateType GameStateType) {
	builder.PrependByteSlot(4, byte(gameStateType), 0)
}
func GameInfoAddWorldGravityZ(builder *flatbuffers.Builder, worldGravityZ float32) {
	builder.PrependFloat32Slot(5, worldGravityZ, 0.0)
}
func GameInfoAddGameSpeed(builder *flatbuffers.Builder, gameSpeed float32) {
	builder.PrependFloat32Slot(6, gameSpeed, 0.0)
}
func GameInfoAddFrameNum(builder *flatbuffers.Builder, frameNum uint32) {
	builder.PrependUint32Slot(7, frameNum, 0)
}
func GameInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
