// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A bot controlled by the RLBot framework
type RLBotT struct {
}

func (t *RLBotT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	RLBotStart(builder)
	return RLBotEnd(builder)
}

func (rcv *RLBot) UnPackTo(t *RLBotT) {
}

func (rcv *RLBot) UnPack() *RLBotT {
	if rcv == nil {
		return nil
	}
	t := &RLBotT{}
	rcv.UnPackTo(t)
	return t
}

type RLBot struct {
	_tab flatbuffers.Table
}

func GetRootAsRLBot(buf []byte, offset flatbuffers.UOffsetT) *RLBot {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RLBot{}
	x.Init(buf, n+offset)
	return x
}

func FinishRLBotBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRLBot(buf []byte, offset flatbuffers.UOffsetT) *RLBot {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RLBot{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRLBotBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RLBot) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RLBot) Table() flatbuffers.Table {
	return rcv._tab
}

func RLBotStart(builder *flatbuffers.Builder) {
	builder.StartObject(0)
}
func RLBotEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
