// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
	"strconv"
)

/// Anchors attached to objects.
type RelativeAnchor byte

const (
	RelativeAnchorNONE       RelativeAnchor = 0
	RelativeAnchorBallAnchor RelativeAnchor = 1
	RelativeAnchorCarAnchor  RelativeAnchor = 2
)

var EnumNamesRelativeAnchor = map[RelativeAnchor]string{
	RelativeAnchorNONE:       "NONE",
	RelativeAnchorBallAnchor: "BallAnchor",
	RelativeAnchorCarAnchor:  "CarAnchor",
}

var EnumValuesRelativeAnchor = map[string]RelativeAnchor{
	"NONE":       RelativeAnchorNONE,
	"BallAnchor": RelativeAnchorBallAnchor,
	"CarAnchor":  RelativeAnchorCarAnchor,
}

func (v RelativeAnchor) String() string {
	if s, ok := EnumNamesRelativeAnchor[v]; ok {
		return s
	}
	return "RelativeAnchor(" + strconv.FormatInt(int64(v), 10) + ")"
}

type RelativeAnchorT struct {
	Type RelativeAnchor
	Value interface{}
}

func (t *RelativeAnchorT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case RelativeAnchorBallAnchor:
		return t.Value.(*BallAnchorT).Pack(builder)
	case RelativeAnchorCarAnchor:
		return t.Value.(*CarAnchorT).Pack(builder)
	}
	return 0
}

func (rcv RelativeAnchor) UnPack(table flatbuffers.Table) *RelativeAnchorT {
	switch rcv {
	case RelativeAnchorBallAnchor:
		var x BallAnchor
		x.Init(table.Bytes, table.Pos)
		return &RelativeAnchorT{Type: RelativeAnchorBallAnchor, Value: x.UnPack()}
	case RelativeAnchorCarAnchor:
		var x CarAnchor
		x.Init(table.Bytes, table.Pos)
		return &RelativeAnchorT{Type: RelativeAnchorCarAnchor, Value: x.UnPack()}
	}
	return nil
}
