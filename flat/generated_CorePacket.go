// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Packet containing a CoreMessage
type CorePacketT struct {
	Message *CoreMessageT `json:"message"`
}

func (t *CorePacketT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	messageOffset := t.Message.Pack(builder)

	CorePacketStart(builder)
	if t.Message != nil {
		CorePacketAddMessageType(builder, t.Message.Type)
	}
	CorePacketAddMessage(builder, messageOffset)
	return CorePacketEnd(builder)
}

func (rcv *CorePacket) UnPackTo(t *CorePacketT) {
	messageTable := flatbuffers.Table{}
	if rcv.Message(&messageTable) {
		t.Message = rcv.MessageType().UnPack(messageTable)
	}
}

func (rcv *CorePacket) UnPack() *CorePacketT {
	if rcv == nil {
		return nil
	}
	t := &CorePacketT{}
	rcv.UnPackTo(t)
	return t
}

type CorePacket struct {
	_tab flatbuffers.Table
}

func GetRootAsCorePacket(buf []byte, offset flatbuffers.UOffsetT) *CorePacket {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CorePacket{}
	x.Init(buf, n+offset)
	return x
}

func FinishCorePacketBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCorePacket(buf []byte, offset flatbuffers.UOffsetT) *CorePacket {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CorePacket{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCorePacketBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CorePacket) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CorePacket) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CorePacket) MessageType() CoreMessage {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return CoreMessage(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *CorePacket) MutateMessageType(n CoreMessage) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *CorePacket) Message(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func CorePacketStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CorePacketAddMessageType(builder *flatbuffers.Builder, messageType CoreMessage) {
	builder.PrependByteSlot(0, byte(messageType), 0)
}
func CorePacketAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(message), 0)
}
func CorePacketEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
