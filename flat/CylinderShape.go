// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CylinderShapeT struct {
	Diameter float32 `json:"diameter"`
	Height float32 `json:"height"`
}

func (t *CylinderShapeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	CylinderShapeStart(builder)
	CylinderShapeAddDiameter(builder, t.Diameter)
	CylinderShapeAddHeight(builder, t.Height)
	return CylinderShapeEnd(builder)
}

func (rcv *CylinderShape) UnPackTo(t *CylinderShapeT) {
	t.Diameter = rcv.Diameter()
	t.Height = rcv.Height()
}

func (rcv *CylinderShape) UnPack() *CylinderShapeT {
	if rcv == nil {
		return nil
	}
	t := &CylinderShapeT{}
	rcv.UnPackTo(t)
	return t
}

type CylinderShape struct {
	_tab flatbuffers.Table
}

func GetRootAsCylinderShape(buf []byte, offset flatbuffers.UOffsetT) *CylinderShape {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CylinderShape{}
	x.Init(buf, n+offset)
	return x
}

func FinishCylinderShapeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCylinderShape(buf []byte, offset flatbuffers.UOffsetT) *CylinderShape {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CylinderShape{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCylinderShapeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CylinderShape) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CylinderShape) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CylinderShape) Diameter() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CylinderShape) MutateDiameter(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *CylinderShape) Height() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CylinderShape) MutateHeight(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func CylinderShapeStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CylinderShapeAddDiameter(builder *flatbuffers.Builder, diameter float32) {
	builder.PrependFloat32Slot(0, diameter, 0.0)
}
func CylinderShapeAddHeight(builder *flatbuffers.Builder, height float32) {
	builder.PrependFloat32Slot(1, height, 0.0)
}
func CylinderShapeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
