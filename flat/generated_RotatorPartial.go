// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A rotator describing a rotation with nullable pith, yaw, and roll.
/// Used for game state setting to define which part of a rotator should change.
/// If a component is null, then the component will keep its current value.
/// Values are in radians.
type RotatorPartialT struct {
	Pitch *FloatT `json:"pitch"`
	Yaw *FloatT `json:"yaw"`
	Roll *FloatT `json:"roll"`
}

func (t *RotatorPartialT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	RotatorPartialStart(builder)
	pitchOffset := t.Pitch.Pack(builder)
	RotatorPartialAddPitch(builder, pitchOffset)
	yawOffset := t.Yaw.Pack(builder)
	RotatorPartialAddYaw(builder, yawOffset)
	rollOffset := t.Roll.Pack(builder)
	RotatorPartialAddRoll(builder, rollOffset)
	return RotatorPartialEnd(builder)
}

func (rcv *RotatorPartial) UnPackTo(t *RotatorPartialT) {
	t.Pitch = rcv.Pitch(nil).UnPack()
	t.Yaw = rcv.Yaw(nil).UnPack()
	t.Roll = rcv.Roll(nil).UnPack()
}

func (rcv *RotatorPartial) UnPack() *RotatorPartialT {
	if rcv == nil {
		return nil
	}
	t := &RotatorPartialT{}
	rcv.UnPackTo(t)
	return t
}

type RotatorPartial struct {
	_tab flatbuffers.Table
}

func GetRootAsRotatorPartial(buf []byte, offset flatbuffers.UOffsetT) *RotatorPartial {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RotatorPartial{}
	x.Init(buf, n+offset)
	return x
}

func FinishRotatorPartialBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRotatorPartial(buf []byte, offset flatbuffers.UOffsetT) *RotatorPartial {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RotatorPartial{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRotatorPartialBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RotatorPartial) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RotatorPartial) Table() flatbuffers.Table {
	return rcv._tab
}

/// In radians with range (-pi/2,+pi/2) where 0 is flat, +pi/2 is nose straight up, -pi/2 is nose straight down.
func (rcv *RotatorPartial) Pitch(obj *Float) *Float {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Float)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// In radians with range (-pi/2,+pi/2) where 0 is flat, +pi/2 is nose straight up, -pi/2 is nose straight down.
/// In radians with range [-pi,+pi) where 0 is towards positive x, rotating clockwise as increased (when seen from above). 
func (rcv *RotatorPartial) Yaw(obj *Float) *Float {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Float)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// In radians with range [-pi,+pi) where 0 is towards positive x, rotating clockwise as increased (when seen from above). 
/// In radians with range (-pi,+pi) where 0 is upright, positive is tilted right, negative is tilted left.
func (rcv *RotatorPartial) Roll(obj *Float) *Float {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Float)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// In radians with range (-pi,+pi) where 0 is upright, positive is tilted right, negative is tilted left.
func RotatorPartialStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RotatorPartialAddPitch(builder *flatbuffers.Builder, pitch flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(pitch), 0)
}
func RotatorPartialAddYaw(builder *flatbuffers.Builder, yaw flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(yaw), 0)
}
func RotatorPartialAddRoll(builder *flatbuffers.Builder, roll flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(roll), 0)
}
func RotatorPartialEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
