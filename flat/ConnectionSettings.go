// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Sent when connecting to RLBot to indicate what type of messages are desired.
/// This could be sent by a bot, or a bot manager governing several bots, an
/// overlay, or any other utility that connects to the RLBot process.
type ConnectionSettingsT struct {
	WantsBallPredictions bool `json:"wants_ball_predictions"`
	WantsComms bool `json:"wants_comms"`
	CloseAfterMatch bool `json:"close_after_match"`
}

func (t *ConnectionSettingsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	ConnectionSettingsStart(builder)
	ConnectionSettingsAddWantsBallPredictions(builder, t.WantsBallPredictions)
	ConnectionSettingsAddWantsComms(builder, t.WantsComms)
	ConnectionSettingsAddCloseAfterMatch(builder, t.CloseAfterMatch)
	return ConnectionSettingsEnd(builder)
}

func (rcv *ConnectionSettings) UnPackTo(t *ConnectionSettingsT) {
	t.WantsBallPredictions = rcv.WantsBallPredictions()
	t.WantsComms = rcv.WantsComms()
	t.CloseAfterMatch = rcv.CloseAfterMatch()
}

func (rcv *ConnectionSettings) UnPack() *ConnectionSettingsT {
	if rcv == nil {
		return nil
	}
	t := &ConnectionSettingsT{}
	rcv.UnPackTo(t)
	return t
}

type ConnectionSettings struct {
	_tab flatbuffers.Table
}

func GetRootAsConnectionSettings(buf []byte, offset flatbuffers.UOffsetT) *ConnectionSettings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConnectionSettings{}
	x.Init(buf, n+offset)
	return x
}

func FinishConnectionSettingsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConnectionSettings(buf []byte, offset flatbuffers.UOffsetT) *ConnectionSettings {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConnectionSettings{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConnectionSettingsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConnectionSettings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConnectionSettings) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConnectionSettings) WantsBallPredictions() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConnectionSettings) MutateWantsBallPredictions(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *ConnectionSettings) WantsComms() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConnectionSettings) MutateWantsComms(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *ConnectionSettings) CloseAfterMatch() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConnectionSettings) MutateCloseAfterMatch(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func ConnectionSettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ConnectionSettingsAddWantsBallPredictions(builder *flatbuffers.Builder, wantsBallPredictions bool) {
	builder.PrependBoolSlot(0, wantsBallPredictions, false)
}
func ConnectionSettingsAddWantsComms(builder *flatbuffers.Builder, wantsComms bool) {
	builder.PrependBoolSlot(1, wantsComms, false)
}
func ConnectionSettingsAddCloseAfterMatch(builder *flatbuffers.Builder, closeAfterMatch bool) {
	builder.PrependBoolSlot(2, closeAfterMatch, false)
}
func ConnectionSettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
