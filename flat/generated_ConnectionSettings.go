// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Sent by clients when connecting to RLBot to indicate what type of messages are desired.
/// This could be sent by a bot, or a bot manager governing several bots, an
/// overlay, or any other utility that connects to the RLBot process.
type ConnectionSettingsT struct {
	AgentId string `json:"agent_id"`
	WantsBallPredictions bool `json:"wants_ball_predictions"`
	WantsComms bool `json:"wants_comms"`
	CloseBetweenMatches bool `json:"close_between_matches"`
}

func (t *ConnectionSettingsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	agentIdOffset := flatbuffers.UOffsetT(0)
	if t.AgentId != "" {
		agentIdOffset = builder.CreateString(t.AgentId)
	}
	ConnectionSettingsStart(builder)
	ConnectionSettingsAddAgentId(builder, agentIdOffset)
	ConnectionSettingsAddWantsBallPredictions(builder, t.WantsBallPredictions)
	ConnectionSettingsAddWantsComms(builder, t.WantsComms)
	ConnectionSettingsAddCloseBetweenMatches(builder, t.CloseBetweenMatches)
	return ConnectionSettingsEnd(builder)
}

func (rcv *ConnectionSettings) UnPackTo(t *ConnectionSettingsT) {
	t.AgentId = string(rcv.AgentId())
	t.WantsBallPredictions = rcv.WantsBallPredictions()
	t.WantsComms = rcv.WantsComms()
	t.CloseBetweenMatches = rcv.CloseBetweenMatches()
}

func (rcv *ConnectionSettings) UnPack() *ConnectionSettingsT {
	if rcv == nil {
		return nil
	}
	t := &ConnectionSettingsT{}
	rcv.UnPackTo(t)
	return t
}

type ConnectionSettings struct {
	_tab flatbuffers.Table
}

func GetRootAsConnectionSettings(buf []byte, offset flatbuffers.UOffsetT) *ConnectionSettings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConnectionSettings{}
	x.Init(buf, n+offset)
	return x
}

func FinishConnectionSettingsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConnectionSettings(buf []byte, offset flatbuffers.UOffsetT) *ConnectionSettings {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConnectionSettings{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConnectionSettingsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConnectionSettings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConnectionSettings) Table() flatbuffers.Table {
	return rcv._tab
}

/// The ID of the bot/script that is associated with the incoming connection.
func (rcv *ConnectionSettings) AgentId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The ID of the bot/script that is associated with the incoming connection.
/// If this is set, RLBot will send BallPrediction data back to the client when available.
func (rcv *ConnectionSettings) WantsBallPredictions() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// If this is set, RLBot will send BallPrediction data back to the client when available.
func (rcv *ConnectionSettings) MutateWantsBallPredictions(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

/// If this is set, RLBot will send MatchComms to the client when available.
func (rcv *ConnectionSettings) WantsComms() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// If this is set, RLBot will send MatchComms to the client when available.
func (rcv *ConnectionSettings) MutateWantsComms(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

/// If this is set, RLBot will close the connection when a match is stopped or when a new
/// match is started. The GUI and other match runners should likely not set this.
func (rcv *ConnectionSettings) CloseBetweenMatches() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// If this is set, RLBot will close the connection when a match is stopped or when a new
/// match is started. The GUI and other match runners should likely not set this.
func (rcv *ConnectionSettings) MutateCloseBetweenMatches(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func ConnectionSettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ConnectionSettingsAddAgentId(builder *flatbuffers.Builder, agentId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(agentId), 0)
}
func ConnectionSettingsAddWantsBallPredictions(builder *flatbuffers.Builder, wantsBallPredictions bool) {
	builder.PrependBoolSlot(1, wantsBallPredictions, false)
}
func ConnectionSettingsAddWantsComms(builder *flatbuffers.Builder, wantsComms bool) {
	builder.PrependBoolSlot(2, wantsComms, false)
}
func ConnectionSettingsAddCloseBetweenMatches(builder *flatbuffers.Builder, closeBetweenMatches bool) {
	builder.PrependBoolSlot(3, closeBetweenMatches, false)
}
func ConnectionSettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
