// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A RenderMessage for a line in 3D space going through a series of points.
type PolyLine3DT struct {
	Points []*Vector3T `json:"points"`
	Color *ColorT `json:"color"`
}

func (t *PolyLine3DT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	pointsOffset := flatbuffers.UOffsetT(0)
	if t.Points != nil {
		pointsLength := len(t.Points)
		PolyLine3DStartPointsVector(builder, pointsLength)
		for j := pointsLength - 1; j >= 0; j-- {
			t.Points[j].Pack(builder)
		}
		pointsOffset = builder.EndVector(pointsLength)
	}
	PolyLine3DStart(builder)
	PolyLine3DAddPoints(builder, pointsOffset)
	colorOffset := t.Color.Pack(builder)
	PolyLine3DAddColor(builder, colorOffset)
	return PolyLine3DEnd(builder)
}

func (rcv *PolyLine3D) UnPackTo(t *PolyLine3DT) {
	pointsLength := rcv.PointsLength()
	t.Points = make([]*Vector3T, pointsLength)
	for j := 0; j < pointsLength; j++ {
		x := Vector3{}
		rcv.Points(&x, j)
		t.Points[j] = x.UnPack()
	}
	t.Color = rcv.Color(nil).UnPack()
}

func (rcv *PolyLine3D) UnPack() *PolyLine3DT {
	if rcv == nil {
		return nil
	}
	t := &PolyLine3DT{}
	rcv.UnPackTo(t)
	return t
}

type PolyLine3D struct {
	_tab flatbuffers.Table
}

func GetRootAsPolyLine3D(buf []byte, offset flatbuffers.UOffsetT) *PolyLine3D {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PolyLine3D{}
	x.Init(buf, n+offset)
	return x
}

func FinishPolyLine3DBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPolyLine3D(buf []byte, offset flatbuffers.UOffsetT) *PolyLine3D {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PolyLine3D{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPolyLine3DBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PolyLine3D) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PolyLine3D) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PolyLine3D) Points(obj *Vector3, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 12
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *PolyLine3D) PointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *PolyLine3D) Color(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func PolyLine3DStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PolyLine3DAddPoints(builder *flatbuffers.Builder, points flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(points), 0)
}
func PolyLine3DStartPointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(12, numElems, 4)
}
func PolyLine3DAddColor(builder *flatbuffers.Builder, color flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(color), 0)
}
func PolyLine3DEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
