// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Sent to core to indicate that you want to disconnect.
/// Sent from core to indicate that you should exit.
type DisconnectSignalT struct {
}

func (t *DisconnectSignalT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	DisconnectSignalStart(builder)
	return DisconnectSignalEnd(builder)
}

func (rcv *DisconnectSignal) UnPackTo(t *DisconnectSignalT) {
}

func (rcv *DisconnectSignal) UnPack() *DisconnectSignalT {
	if rcv == nil {
		return nil
	}
	t := &DisconnectSignalT{}
	rcv.UnPackTo(t)
	return t
}

type DisconnectSignal struct {
	_tab flatbuffers.Table
}

func GetRootAsDisconnectSignal(buf []byte, offset flatbuffers.UOffsetT) *DisconnectSignal {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DisconnectSignal{}
	x.Init(buf, n+offset)
	return x
}

func FinishDisconnectSignalBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDisconnectSignal(buf []byte, offset flatbuffers.UOffsetT) *DisconnectSignal {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DisconnectSignal{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDisconnectSignalBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DisconnectSignal) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DisconnectSignal) Table() flatbuffers.Table {
	return rcv._tab
}

func DisconnectSignalStart(builder *flatbuffers.Builder) {
	builder.StartObject(0)
}
func DisconnectSignalEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
