// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BallPredictionT struct {
	Slices []*PredictionSliceT `json:"slices"`
}

func (t *BallPredictionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	slicesOffset := flatbuffers.UOffsetT(0)
	if t.Slices != nil {
		slicesLength := len(t.Slices)
		slicesOffsets := make([]flatbuffers.UOffsetT, slicesLength)
		for j := 0; j < slicesLength; j++ {
			slicesOffsets[j] = t.Slices[j].Pack(builder)
		}
		BallPredictionStartSlicesVector(builder, slicesLength)
		for j := slicesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(slicesOffsets[j])
		}
		slicesOffset = builder.EndVector(slicesLength)
	}
	BallPredictionStart(builder)
	BallPredictionAddSlices(builder, slicesOffset)
	return BallPredictionEnd(builder)
}

func (rcv *BallPrediction) UnPackTo(t *BallPredictionT) {
	slicesLength := rcv.SlicesLength()
	t.Slices = make([]*PredictionSliceT, slicesLength)
	for j := 0; j < slicesLength; j++ {
		x := PredictionSlice{}
		rcv.Slices(&x, j)
		t.Slices[j] = x.UnPack()
	}
}

func (rcv *BallPrediction) UnPack() *BallPredictionT {
	if rcv == nil {
		return nil
	}
	t := &BallPredictionT{}
	rcv.UnPackTo(t)
	return t
}

type BallPrediction struct {
	_tab flatbuffers.Table
}

func GetRootAsBallPrediction(buf []byte, offset flatbuffers.UOffsetT) *BallPrediction {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BallPrediction{}
	x.Init(buf, n+offset)
	return x
}

func FinishBallPredictionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBallPrediction(buf []byte, offset flatbuffers.UOffsetT) *BallPrediction {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BallPrediction{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBallPredictionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *BallPrediction) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BallPrediction) Table() flatbuffers.Table {
	return rcv._tab
}

/// A list of places the ball will be at specific times in the future.
/// It is guaranteed to sorted so that time increases with each slice.
/// It is NOT guaranteed to have a consistent amount of time between slices.
func (rcv *BallPrediction) Slices(obj *PredictionSlice, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *BallPrediction) SlicesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// A list of places the ball will be at specific times in the future.
/// It is guaranteed to sorted so that time increases with each slice.
/// It is NOT guaranteed to have a consistent amount of time between slices.
func BallPredictionStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func BallPredictionAddSlices(builder *flatbuffers.Builder, slices flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(slices), 0)
}
func BallPredictionStartSlicesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BallPredictionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
