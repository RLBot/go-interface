// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Information about a ball touch.
type TouchT struct {
	GameSeconds float32 `json:"game_seconds"`
	Location *Vector3T `json:"location"`
	Normal *Vector3T `json:"normal"`
	BallIndex uint32 `json:"ball_index"`
}

func (t *TouchT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	TouchStart(builder)
	TouchAddGameSeconds(builder, t.GameSeconds)
	locationOffset := t.Location.Pack(builder)
	TouchAddLocation(builder, locationOffset)
	normalOffset := t.Normal.Pack(builder)
	TouchAddNormal(builder, normalOffset)
	TouchAddBallIndex(builder, t.BallIndex)
	return TouchEnd(builder)
}

func (rcv *Touch) UnPackTo(t *TouchT) {
	t.GameSeconds = rcv.GameSeconds()
	t.Location = rcv.Location(nil).UnPack()
	t.Normal = rcv.Normal(nil).UnPack()
	t.BallIndex = rcv.BallIndex()
}

func (rcv *Touch) UnPack() *TouchT {
	if rcv == nil {
		return nil
	}
	t := &TouchT{}
	rcv.UnPackTo(t)
	return t
}

type Touch struct {
	_tab flatbuffers.Table
}

func GetRootAsTouch(buf []byte, offset flatbuffers.UOffsetT) *Touch {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Touch{}
	x.Init(buf, n+offset)
	return x
}

func FinishTouchBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsTouch(buf []byte, offset flatbuffers.UOffsetT) *Touch {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Touch{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTouchBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Touch) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Touch) Table() flatbuffers.Table {
	return rcv._tab
}

/// Seconds that had elapsed in the game when the touch occurred.
func (rcv *Touch) GameSeconds() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Seconds that had elapsed in the game when the touch occurred.
func (rcv *Touch) MutateGameSeconds(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

/// The point of contact for the touch.
func (rcv *Touch) Location(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// The point of contact for the touch.
/// The direction of the touch as a unit vector pointing from the point of contact towards the center of the ball.
func (rcv *Touch) Normal(obj *Vector3) *Vector3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// The direction of the touch as a unit vector pointing from the point of contact towards the center of the ball.
/// The index of the ball that was touched (in case there are multiple balls).
func (rcv *Touch) BallIndex() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The index of the ball that was touched (in case there are multiple balls).
func (rcv *Touch) MutateBallIndex(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func TouchStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func TouchAddGameSeconds(builder *flatbuffers.Builder, gameSeconds float32) {
	builder.PrependFloat32Slot(0, gameSeconds, 0.0)
}
func TouchAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(location), 0)
}
func TouchAddNormal(builder *flatbuffers.Builder, normal flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(normal), 0)
}
func TouchAddBallIndex(builder *flatbuffers.Builder, ballIndex uint32) {
	builder.PrependUint32Slot(3, ballIndex, 0)
}
func TouchEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
