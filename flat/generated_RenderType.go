// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
	"strconv"
)

type RenderType byte

const (
	RenderTypeNONE       RenderType = 0
	RenderTypeLine3D     RenderType = 1
	RenderTypePolyLine3D RenderType = 2
	RenderTypeString2D   RenderType = 3
	RenderTypeString3D   RenderType = 4
	RenderTypeRect2D     RenderType = 5
	RenderTypeRect3D     RenderType = 6
)

var EnumNamesRenderType = map[RenderType]string{
	RenderTypeNONE:       "NONE",
	RenderTypeLine3D:     "Line3D",
	RenderTypePolyLine3D: "PolyLine3D",
	RenderTypeString2D:   "String2D",
	RenderTypeString3D:   "String3D",
	RenderTypeRect2D:     "Rect2D",
	RenderTypeRect3D:     "Rect3D",
}

var EnumValuesRenderType = map[string]RenderType{
	"NONE":       RenderTypeNONE,
	"Line3D":     RenderTypeLine3D,
	"PolyLine3D": RenderTypePolyLine3D,
	"String2D":   RenderTypeString2D,
	"String3D":   RenderTypeString3D,
	"Rect2D":     RenderTypeRect2D,
	"Rect3D":     RenderTypeRect3D,
}

func (v RenderType) String() string {
	if s, ok := EnumNamesRenderType[v]; ok {
		return s
	}
	return "RenderType(" + strconv.FormatInt(int64(v), 10) + ")"
}

type RenderTypeT struct {
	Type RenderType
	Value interface{}
}

func (t *RenderTypeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case RenderTypeLine3D:
		return t.Value.(*Line3DT).Pack(builder)
	case RenderTypePolyLine3D:
		return t.Value.(*PolyLine3DT).Pack(builder)
	case RenderTypeString2D:
		return t.Value.(*String2DT).Pack(builder)
	case RenderTypeString3D:
		return t.Value.(*String3DT).Pack(builder)
	case RenderTypeRect2D:
		return t.Value.(*Rect2DT).Pack(builder)
	case RenderTypeRect3D:
		return t.Value.(*Rect3DT).Pack(builder)
	}
	return 0
}

func (rcv RenderType) UnPack(table flatbuffers.Table) *RenderTypeT {
	switch rcv {
	case RenderTypeLine3D:
		var x Line3D
		x.Init(table.Bytes, table.Pos)
		return &RenderTypeT{Type: RenderTypeLine3D, Value: x.UnPack()}
	case RenderTypePolyLine3D:
		var x PolyLine3D
		x.Init(table.Bytes, table.Pos)
		return &RenderTypeT{Type: RenderTypePolyLine3D, Value: x.UnPack()}
	case RenderTypeString2D:
		var x String2D
		x.Init(table.Bytes, table.Pos)
		return &RenderTypeT{Type: RenderTypeString2D, Value: x.UnPack()}
	case RenderTypeString3D:
		var x String3D
		x.Init(table.Bytes, table.Pos)
		return &RenderTypeT{Type: RenderTypeString3D, Value: x.UnPack()}
	case RenderTypeRect2D:
		var x Rect2D
		x.Init(table.Bytes, table.Pos)
		return &RenderTypeT{Type: RenderTypeRect2D, Value: x.UnPack()}
	case RenderTypeRect3D:
		var x Rect3D
		x.Init(table.Bytes, table.Pos)
		return &RenderTypeT{Type: RenderTypeRect3D, Value: x.UnPack()}
	}
	return nil
}
