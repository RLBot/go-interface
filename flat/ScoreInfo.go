// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ScoreInfoT struct {
	Score uint32 `json:"score"`
	Goals uint32 `json:"goals"`
	OwnGoals uint32 `json:"own_goals"`
	Assists uint32 `json:"assists"`
	Saves uint32 `json:"saves"`
	Shots uint32 `json:"shots"`
	Demolitions uint32 `json:"demolitions"`
}

func (t *ScoreInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	ScoreInfoStart(builder)
	ScoreInfoAddScore(builder, t.Score)
	ScoreInfoAddGoals(builder, t.Goals)
	ScoreInfoAddOwnGoals(builder, t.OwnGoals)
	ScoreInfoAddAssists(builder, t.Assists)
	ScoreInfoAddSaves(builder, t.Saves)
	ScoreInfoAddShots(builder, t.Shots)
	ScoreInfoAddDemolitions(builder, t.Demolitions)
	return ScoreInfoEnd(builder)
}

func (rcv *ScoreInfo) UnPackTo(t *ScoreInfoT) {
	t.Score = rcv.Score()
	t.Goals = rcv.Goals()
	t.OwnGoals = rcv.OwnGoals()
	t.Assists = rcv.Assists()
	t.Saves = rcv.Saves()
	t.Shots = rcv.Shots()
	t.Demolitions = rcv.Demolitions()
}

func (rcv *ScoreInfo) UnPack() *ScoreInfoT {
	if rcv == nil {
		return nil
	}
	t := &ScoreInfoT{}
	rcv.UnPackTo(t)
	return t
}

type ScoreInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsScoreInfo(buf []byte, offset flatbuffers.UOffsetT) *ScoreInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ScoreInfo{}
	x.Init(buf, n+offset)
	return x
}

func FinishScoreInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsScoreInfo(buf []byte, offset flatbuffers.UOffsetT) *ScoreInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ScoreInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedScoreInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ScoreInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ScoreInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ScoreInfo) Score() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScoreInfo) MutateScore(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ScoreInfo) Goals() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScoreInfo) MutateGoals(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *ScoreInfo) OwnGoals() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScoreInfo) MutateOwnGoals(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *ScoreInfo) Assists() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScoreInfo) MutateAssists(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *ScoreInfo) Saves() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScoreInfo) MutateSaves(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *ScoreInfo) Shots() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScoreInfo) MutateShots(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *ScoreInfo) Demolitions() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScoreInfo) MutateDemolitions(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func ScoreInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func ScoreInfoAddScore(builder *flatbuffers.Builder, score uint32) {
	builder.PrependUint32Slot(0, score, 0)
}
func ScoreInfoAddGoals(builder *flatbuffers.Builder, goals uint32) {
	builder.PrependUint32Slot(1, goals, 0)
}
func ScoreInfoAddOwnGoals(builder *flatbuffers.Builder, ownGoals uint32) {
	builder.PrependUint32Slot(2, ownGoals, 0)
}
func ScoreInfoAddAssists(builder *flatbuffers.Builder, assists uint32) {
	builder.PrependUint32Slot(3, assists, 0)
}
func ScoreInfoAddSaves(builder *flatbuffers.Builder, saves uint32) {
	builder.PrependUint32Slot(4, saves, 0)
}
func ScoreInfoAddShots(builder *flatbuffers.Builder, shots uint32) {
	builder.PrependUint32Slot(5, shots, 0)
}
func ScoreInfoAddDemolitions(builder *flatbuffers.Builder, demolitions uint32) {
	builder.PrependUint32Slot(6, demolitions, 0)
}
func ScoreInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
