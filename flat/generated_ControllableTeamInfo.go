// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Server message with information about the cars that the client can control.
/// Sent to bot clients as a response to ConnectionSettings.
/// There may be more than one car in case the bot is a hivemind.
type ControllableTeamInfoT struct {
	Team uint32 `json:"team"`
	Controllables []*ControllableInfoT `json:"controllables"`
}

func (t *ControllableTeamInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	controllablesOffset := flatbuffers.UOffsetT(0)
	if t.Controllables != nil {
		controllablesLength := len(t.Controllables)
		controllablesOffsets := make([]flatbuffers.UOffsetT, controllablesLength)
		for j := 0; j < controllablesLength; j++ {
			controllablesOffsets[j] = t.Controllables[j].Pack(builder)
		}
		ControllableTeamInfoStartControllablesVector(builder, controllablesLength)
		for j := controllablesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(controllablesOffsets[j])
		}
		controllablesOffset = builder.EndVector(controllablesLength)
	}
	ControllableTeamInfoStart(builder)
	ControllableTeamInfoAddTeam(builder, t.Team)
	ControllableTeamInfoAddControllables(builder, controllablesOffset)
	return ControllableTeamInfoEnd(builder)
}

func (rcv *ControllableTeamInfo) UnPackTo(t *ControllableTeamInfoT) {
	t.Team = rcv.Team()
	controllablesLength := rcv.ControllablesLength()
	t.Controllables = make([]*ControllableInfoT, controllablesLength)
	for j := 0; j < controllablesLength; j++ {
		x := ControllableInfo{}
		rcv.Controllables(&x, j)
		t.Controllables[j] = x.UnPack()
	}
}

func (rcv *ControllableTeamInfo) UnPack() *ControllableTeamInfoT {
	if rcv == nil {
		return nil
	}
	t := &ControllableTeamInfoT{}
	rcv.UnPackTo(t)
	return t
}

type ControllableTeamInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsControllableTeamInfo(buf []byte, offset flatbuffers.UOffsetT) *ControllableTeamInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ControllableTeamInfo{}
	x.Init(buf, n+offset)
	return x
}

func FinishControllableTeamInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsControllableTeamInfo(buf []byte, offset flatbuffers.UOffsetT) *ControllableTeamInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ControllableTeamInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedControllableTeamInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ControllableTeamInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ControllableTeamInfo) Table() flatbuffers.Table {
	return rcv._tab
}

/// The assigned team for this client.
func (rcv *ControllableTeamInfo) Team() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The assigned team for this client.
func (rcv *ControllableTeamInfo) MutateTeam(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// The bots that RLBot will allow this client to control.
func (rcv *ControllableTeamInfo) Controllables(obj *ControllableInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ControllableTeamInfo) ControllablesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The bots that RLBot will allow this client to control.
func ControllableTeamInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ControllableTeamInfoAddTeam(builder *flatbuffers.Builder, team uint32) {
	builder.PrependUint32Slot(0, team, 0)
}
func ControllableTeamInfoAddControllables(builder *flatbuffers.Builder, controllables flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(controllables), 0)
}
func ControllableTeamInfoStartControllablesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ControllableTeamInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
