// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// We have some very small messages that are only a few bytes but potentially sent at high frequency.
/// Bundle them into a packet to reduce the overhead of sending data over TCP.
type MessagePacketT struct {
	Messages []*GameMessageWrapperT `json:"messages"`
	GameSeconds float32 `json:"game_seconds"`
	FrameNum uint32 `json:"frame_num"`
}

func (t *MessagePacketT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	messagesOffset := flatbuffers.UOffsetT(0)
	if t.Messages != nil {
		messagesLength := len(t.Messages)
		messagesOffsets := make([]flatbuffers.UOffsetT, messagesLength)
		for j := 0; j < messagesLength; j++ {
			messagesOffsets[j] = t.Messages[j].Pack(builder)
		}
		MessagePacketStartMessagesVector(builder, messagesLength)
		for j := messagesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(messagesOffsets[j])
		}
		messagesOffset = builder.EndVector(messagesLength)
	}
	MessagePacketStart(builder)
	MessagePacketAddMessages(builder, messagesOffset)
	MessagePacketAddGameSeconds(builder, t.GameSeconds)
	MessagePacketAddFrameNum(builder, t.FrameNum)
	return MessagePacketEnd(builder)
}

func (rcv *MessagePacket) UnPackTo(t *MessagePacketT) {
	messagesLength := rcv.MessagesLength()
	t.Messages = make([]*GameMessageWrapperT, messagesLength)
	for j := 0; j < messagesLength; j++ {
		x := GameMessageWrapper{}
		rcv.Messages(&x, j)
		t.Messages[j] = x.UnPack()
	}
	t.GameSeconds = rcv.GameSeconds()
	t.FrameNum = rcv.FrameNum()
}

func (rcv *MessagePacket) UnPack() *MessagePacketT {
	if rcv == nil {
		return nil
	}
	t := &MessagePacketT{}
	rcv.UnPackTo(t)
	return t
}

type MessagePacket struct {
	_tab flatbuffers.Table
}

func GetRootAsMessagePacket(buf []byte, offset flatbuffers.UOffsetT) *MessagePacket {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessagePacket{}
	x.Init(buf, n+offset)
	return x
}

func FinishMessagePacketBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMessagePacket(buf []byte, offset flatbuffers.UOffsetT) *MessagePacket {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessagePacket{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMessagePacketBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MessagePacket) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessagePacket) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessagePacket) Messages(obj *GameMessageWrapper, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MessagePacket) MessagesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MessagePacket) GameSeconds() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MessagePacket) MutateGameSeconds(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *MessagePacket) FrameNum() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessagePacket) MutateFrameNum(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func MessagePacketStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func MessagePacketAddMessages(builder *flatbuffers.Builder, messages flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(messages), 0)
}
func MessagePacketStartMessagesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MessagePacketAddGameSeconds(builder *flatbuffers.Builder, gameSeconds float32) {
	builder.PrependFloat32Slot(1, gameSeconds, 0.0)
}
func MessagePacketAddFrameNum(builder *flatbuffers.Builder, frameNum uint32) {
	builder.PrependUint32Slot(2, frameNum, 0)
}
func MessagePacketEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
