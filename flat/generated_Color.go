// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// An RGBA color.
type ColorT struct {
	R byte `json:"r"`
	G byte `json:"g"`
	B byte `json:"b"`
	A byte `json:"a"`
}

func (t *ColorT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateColor(builder, t.R, t.G, t.B, t.A)
}
func (rcv *Color) UnPackTo(t *ColorT) {
	t.R = rcv.R()
	t.G = rcv.G()
	t.B = rcv.B()
	t.A = rcv.A()
}

func (rcv *Color) UnPack() *ColorT {
	if rcv == nil {
		return nil
	}
	t := &ColorT{}
	rcv.UnPackTo(t)
	return t
}

type Color struct {
	_tab flatbuffers.Struct
}

func (rcv *Color) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Color) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Color) R() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Color) MutateR(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Color) G() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(1))
}
func (rcv *Color) MutateG(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(1), n)
}

func (rcv *Color) B() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(2))
}
func (rcv *Color) MutateB(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(2), n)
}

func (rcv *Color) A() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(3))
}
func (rcv *Color) MutateA(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(3), n)
}

func CreateColor(builder *flatbuffers.Builder, r byte, g byte, b byte, a byte) flatbuffers.UOffsetT {
	builder.Prep(1, 4)
	builder.PrependByte(a)
	builder.PrependByte(b)
	builder.PrependByte(g)
	builder.PrependByte(r)
	return builder.Offset()
}
