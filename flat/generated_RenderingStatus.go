// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// As an interface message, this requests for a specificed agent to have its ability to render changed.
/// This changed will then be broadcasted to all current connections as a core message.
/// Does nothing if rendering has been completely disabled.
type RenderingStatusT struct {
	Index uint32 `json:"index"`
	IsBot bool `json:"is_bot"`
	Status bool `json:"status"`
}

func (t *RenderingStatusT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	RenderingStatusStart(builder)
	RenderingStatusAddIndex(builder, t.Index)
	RenderingStatusAddIsBot(builder, t.IsBot)
	RenderingStatusAddStatus(builder, t.Status)
	return RenderingStatusEnd(builder)
}

func (rcv *RenderingStatus) UnPackTo(t *RenderingStatusT) {
	t.Index = rcv.Index()
	t.IsBot = rcv.IsBot()
	t.Status = rcv.Status()
}

func (rcv *RenderingStatus) UnPack() *RenderingStatusT {
	if rcv == nil {
		return nil
	}
	t := &RenderingStatusT{}
	rcv.UnPackTo(t)
	return t
}

type RenderingStatus struct {
	_tab flatbuffers.Table
}

func GetRootAsRenderingStatus(buf []byte, offset flatbuffers.UOffsetT) *RenderingStatus {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RenderingStatus{}
	x.Init(buf, n+offset)
	return x
}

func FinishRenderingStatusBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRenderingStatus(buf []byte, offset flatbuffers.UOffsetT) *RenderingStatus {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RenderingStatus{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRenderingStatusBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RenderingStatus) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RenderingStatus) Table() flatbuffers.Table {
	return rcv._tab
}

/// If `is_bot`, this is the index of the bot in `GamePacket` that has been updated.
/// Otherwise, this is the index of the script in `MatchConfiguration` that has been updated.
func (rcv *RenderingStatus) Index() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// If `is_bot`, this is the index of the bot in `GamePacket` that has been updated.
/// Otherwise, this is the index of the script in `MatchConfiguration` that has been updated.
func (rcv *RenderingStatus) MutateIndex(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// Identifies if the index is that of a bot or a script
func (rcv *RenderingStatus) IsBot() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Identifies if the index is that of a bot or a script
func (rcv *RenderingStatus) MutateIsBot(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

/// If rendering is now enabled or disabled for the specific agent
func (rcv *RenderingStatus) Status() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// If rendering is now enabled or disabled for the specific agent
func (rcv *RenderingStatus) MutateStatus(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func RenderingStatusStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RenderingStatusAddIndex(builder *flatbuffers.Builder, index uint32) {
	builder.PrependUint32Slot(0, index, 0)
}
func RenderingStatusAddIsBot(builder *flatbuffers.Builder, isBot bool) {
	builder.PrependBoolSlot(1, isBot, false)
}
func RenderingStatusAddStatus(builder *flatbuffers.Builder, status bool) {
	builder.PrependBoolSlot(2, status, false)
}
func RenderingStatusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
