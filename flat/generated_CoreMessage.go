// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
	"strconv"
)

/// Messages sent from core to interfaces
type CoreMessage byte

const (
	CoreMessageNONE                 CoreMessage = 0
	/// Interface should exit when this packet is received.
	CoreMessageDisconnectSignal     CoreMessage = 1
	/// Main game packet containing all relevant data.
	/// Sent every tick once core has received InitComplete
	CoreMessageGamePacket           CoreMessage = 2
	/// Sent once core receives a valid ConnectionSettings from the interface
	CoreMessageFieldInfo            CoreMessage = 3
	/// Sent once core receives a valid MatchConfiguration from the interface
	CoreMessageMatchConfiguration   CoreMessage = 4
	/// Core relays matchcomms to bot agents in the same team if team_only is true
	CoreMessageMatchComm            CoreMessage = 5
	/// Prediction of ball trajectory
	CoreMessageBallPrediction       CoreMessage = 6
	/// Sent once core receives a valid ConnectionSettings from the interface
	CoreMessageControllableTeamInfo CoreMessage = 7
	/// An agent had its ability to render changed
	CoreMessageRenderingStatus      CoreMessage = 8
)

var EnumNamesCoreMessage = map[CoreMessage]string{
	CoreMessageNONE:                 "NONE",
	CoreMessageDisconnectSignal:     "DisconnectSignal",
	CoreMessageGamePacket:           "GamePacket",
	CoreMessageFieldInfo:            "FieldInfo",
	CoreMessageMatchConfiguration:   "MatchConfiguration",
	CoreMessageMatchComm:            "MatchComm",
	CoreMessageBallPrediction:       "BallPrediction",
	CoreMessageControllableTeamInfo: "ControllableTeamInfo",
	CoreMessageRenderingStatus:      "RenderingStatus",
}

var EnumValuesCoreMessage = map[string]CoreMessage{
	"NONE":                 CoreMessageNONE,
	"DisconnectSignal":     CoreMessageDisconnectSignal,
	"GamePacket":           CoreMessageGamePacket,
	"FieldInfo":            CoreMessageFieldInfo,
	"MatchConfiguration":   CoreMessageMatchConfiguration,
	"MatchComm":            CoreMessageMatchComm,
	"BallPrediction":       CoreMessageBallPrediction,
	"ControllableTeamInfo": CoreMessageControllableTeamInfo,
	"RenderingStatus":      CoreMessageRenderingStatus,
}

func (v CoreMessage) String() string {
	if s, ok := EnumNamesCoreMessage[v]; ok {
		return s
	}
	return "CoreMessage(" + strconv.FormatInt(int64(v), 10) + ")"
}

type CoreMessageT struct {
	Type CoreMessage
	Value interface{}
}

func (t *CoreMessageT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case CoreMessageDisconnectSignal:
		return t.Value.(*DisconnectSignalT).Pack(builder)
	case CoreMessageGamePacket:
		return t.Value.(*GamePacketT).Pack(builder)
	case CoreMessageFieldInfo:
		return t.Value.(*FieldInfoT).Pack(builder)
	case CoreMessageMatchConfiguration:
		return t.Value.(*MatchConfigurationT).Pack(builder)
	case CoreMessageMatchComm:
		return t.Value.(*MatchCommT).Pack(builder)
	case CoreMessageBallPrediction:
		return t.Value.(*BallPredictionT).Pack(builder)
	case CoreMessageControllableTeamInfo:
		return t.Value.(*ControllableTeamInfoT).Pack(builder)
	case CoreMessageRenderingStatus:
		return t.Value.(*RenderingStatusT).Pack(builder)
	}
	return 0
}

func (rcv CoreMessage) UnPack(table flatbuffers.Table) *CoreMessageT {
	switch rcv {
	case CoreMessageDisconnectSignal:
		var x DisconnectSignal
		x.Init(table.Bytes, table.Pos)
		return &CoreMessageT{Type: CoreMessageDisconnectSignal, Value: x.UnPack()}
	case CoreMessageGamePacket:
		var x GamePacket
		x.Init(table.Bytes, table.Pos)
		return &CoreMessageT{Type: CoreMessageGamePacket, Value: x.UnPack()}
	case CoreMessageFieldInfo:
		var x FieldInfo
		x.Init(table.Bytes, table.Pos)
		return &CoreMessageT{Type: CoreMessageFieldInfo, Value: x.UnPack()}
	case CoreMessageMatchConfiguration:
		var x MatchConfiguration
		x.Init(table.Bytes, table.Pos)
		return &CoreMessageT{Type: CoreMessageMatchConfiguration, Value: x.UnPack()}
	case CoreMessageMatchComm:
		var x MatchComm
		x.Init(table.Bytes, table.Pos)
		return &CoreMessageT{Type: CoreMessageMatchComm, Value: x.UnPack()}
	case CoreMessageBallPrediction:
		var x BallPrediction
		x.Init(table.Bytes, table.Pos)
		return &CoreMessageT{Type: CoreMessageBallPrediction, Value: x.UnPack()}
	case CoreMessageControllableTeamInfo:
		var x ControllableTeamInfo
		x.Init(table.Bytes, table.Pos)
		return &CoreMessageT{Type: CoreMessageControllableTeamInfo, Value: x.UnPack()}
	case CoreMessageRenderingStatus:
		var x RenderingStatus
		x.Init(table.Bytes, table.Pos)
		return &CoreMessageT{Type: CoreMessageRenderingStatus, Value: x.UnPack()}
	}
	return nil
}
